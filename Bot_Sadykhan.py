import logging
import os
import csv
import pytz
from datetime import datetime
from dotenv import load_dotenv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from aiogram import executor

# === –ö–æ–Ω—Ñ–∏–≥ ===
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")
CHAT_ID        = int(os.getenv("CHAT_ID", "0"))
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
LOG_PATH       = os.getenv("LOG_PATH", "checklist_log.csv")

ALLOWED_USERS = [
    "–ù–∏–∫–æ–ª–∞–π –ö—Ä—ã–ª–æ–≤","–¢–∞–∂–¥–∏–Ω –£—Å–µ–π–Ω","–ñ–∞–Ω–∞—Ä –ë”©–ª—Ç—ñ—Ä—ñ–∫",
    "–®–∞—Ä–∞ –ê–±–¥–∏–µ–≤–∞","–¢–æ—Ö—Ç–∞—Ä –ß–∞—Ä–∞–±–∞—Å–æ–≤","*"
]

# === FSM ===
class Form(StatesGroup):
    name     = State()
    pharmacy = State()
    rating   = State()

# === –ß—Ç–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ ===
df = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_i = df[df.iloc[:,0]=="–ë–ª–æ–∫"].index[0] + 1
df = df.iloc[start_i:,:8].reset_index(drop=True)
df.columns = [
    "–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞",
    "–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
]
df = df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])

criteria = []
last = None
for _, r in df.iterrows():
    blk = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else last
    last = blk
    maxv = int(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) if pd.notna(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) and str(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]).isdigit() else 10
    criteria.append({
        "block": blk,
        "criterion": r["–ö—Ä–∏—Ç–µ—Ä–∏–π"],
        "requirement": r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
        "max": maxv
    })

# === –£—Ç–∏–ª–∏—Ç—ã ===
def now_ts():
    return datetime.now(pytz.timezone("Asia/Almaty")).strftime("%Y-%m-%d %H:%M:%S")

def log_csv(ph, nm, ts, sc, mx):
    first = not os.path.exists(LOG_PATH)
    with open(LOG_PATH,"a",newline="",encoding="utf-8") as f:
        w=csv.writer(f)
        if first:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–§–ò–û","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts,ph,nm,sc,mx])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
session = AiohttpSession()
bot     = Bot(token=API_TOKEN,
              session=session,
              default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp      = Dispatcher(bot=bot, storage=storage)

# === /start ===
@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.name)

# === /id, /–ª–æ–≥, /—Å–±—Ä–æ—Å ===
@dp.message(F.text == "/id")
async def cmd_id(msg: types.Message):
    await msg.answer(f"–í–∞—à chat_id: <code>{msg.chat.id}</code>", parse_mode=ParseMode.HTML)

@dp.message(F.text == "/–ª–æ–≥")
async def cmd_log(msg: types.Message):
    if os.path.exists(LOG_PATH):
        await msg.answer_document(FSInputFile(LOG_PATH))
    else:
        await msg.answer("–õ–æ–≥ –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")

@dp.message(F.text == "/—Å–±—Ä–æ—Å")
async def cmd_reset(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–°–±—Ä–æ—à–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /start")

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
@dp.message(Form.name)
async def proc_name(msg: types.Message, state: FSMContext):
    u = msg.text.strip()
    if u in ALLOWED_USERS or "*" in ALLOWED_USERS:
        await state.update_data(name=u, step=0, data=[], start=now_ts())
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
        await state.set_state(Form.pharmacy)
    else:
        await msg.answer("–§–ò–û –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ò–¢-–æ—Ç–¥–µ–ª.")

@dp.message(Form.pharmacy)
async def proc_pharmacy(msg: types.Message, state: FSMContext):
    await state.update_data(pharmacy=msg.text.strip())
    await msg.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_q(msg.chat.id, state)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query(F.data.startswith("score_") | F.data == "prev")
async def cb_handler(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    step = data.get("step", 0)

    if cb.data == "prev" and step > 0:
        data["step"] -= 1
        data["data"].pop()
        await state.set_data(data)
        return await send_q(cb.from_user.id, state)

    sc = int(cb.data.split("_")[1])
    if step < len(criteria):
        data.setdefault("data", []).append({"crit": criteria[step], "score": sc})
        data["step"] += 1
        await state.set_data(data)

    await bot.edit_message_text(
        cb.message.chat.id,
        cb.message.message_id,
        f"‚úÖ –û—Ü–µ–Ω–∫–∞: {sc} {'‚≠ê'*sc}"
    )
    return await send_q(cb.from_user.id, state)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_q(uid: int, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    total = len(criteria)

    if step >= total:
        await bot.send_message(uid, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶")
        return await gen_report(uid, data)

    c = criteria[step]
    txt = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"–ú–∞–∫—Å. –±–∞–ª–ª: {c['max']}"
    )
    kb = InlineKeyboardBuilder()
    start = 0 if c["max"] == 1 else 1
    for i in range(start, c["max"] + 1):
        kb.button(text=str(i), callback_data=f"score_{i}")
    if step > 0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    await bot.send_message(uid, txt, parse_mode=ParseMode.HTML, reply_markup=kb.as_markup())

# === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ===
async def gen_report(uid: int, data):
    name = data["name"]
    ts   = data["start"]
    ph   = data.get("pharmacy", "")

    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active
    title = (
        f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
        f"–î–∞—Ç–∞: {datetime.strptime(ts, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}"
    )
    ws.merge_cells("A1:G2")
    ws["A1"] = title
    ws["A1"].font = Font(size=14, bold=True)
    ws["B3"] = ph

    headers = [
        "–ë–ª–æ–∫", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ",
        "–û—Ü–µ–Ω–∫–∞", "–ú–∞–∫—Å", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–î–∞—Ç–∞"
    ]
    for idx, h in enumerate(headers, start=1):
        ws.cell(row=5, column=idx, value=h).font = Font(bold=True)

    row = 6
    total_sc = 0
    total_mx = 0
    for it in data["data"]:
        cinfo = it["crit"]
        sc    = it["score"]
        ws.cell(row,1,cinfo["block"])
        ws.cell(row,2,cinfo["criterion"])
        ws.cell(row,3,cinfo["requirement"])
        ws.cell(row,4,sc)
        ws.cell(row,5,cinfo["max"])
        ws.cell(row,7,ts)
        total_sc += sc
        total_mx += cinfo["max"]
        row += 1

    ws.cell(row+1,3,"–ò–¢–û–ì–û:");    ws.cell(row+1,4,total_sc)
    ws.cell(row+2,3,"–ú–∞–∫—Å–∏–º—É–º:"); ws.cell(row+2,4,total_mx)

    fn = f"{ph}_{name}_{datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d%m%Y')}.xlsx"
    fn = fn.replace(" ","_")
    wb.save(fn)

    with open(fn,"rb") as f:
        await bot.send_document(CHAT_ID, FSInputFile(f, fn))
    with open(fn,"rb") as f:
        await bot.send_document(uid, FSInputFile(f, fn))

    os.remove(fn)
    log_csv(ph, name, ts, total_sc, total_mx)
    await bot.send_message(uid, "‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤! /start ‚Äî —á—Ç–æ–±—ã –µ—â—ë —Ä–∞–∑.")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
