import logging
import os
import csv
import pytz
from datetime import datetime
from dotenv import load_dotenv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Update

from aiohttp import web

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")      # –≤–∞—à —Ç–æ–∫–µ–Ω
QA_CHAT_ID     = int(os.getenv("CHAT_ID"))   # chat_id QA-—á–∞—Ç–∞
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
PORT           = int(os.getenv("PORT", "8000"))

logging.basicConfig(level=logging.INFO)

# ========== FSM ==========
class Form(StatesGroup):
    name       = State()
    pharmacy   = State()
    rating     = State()
    conclusion = State()   # ‚Üê –Ω–æ–≤—ã–π —à–∞–≥

# ========== –ß—Ç–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ ==========
df = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_i = df[df.iloc[:,0]=="–ë–ª–æ–∫"].index[0] + 1
df = df.iloc[start_i:,:8].reset_index(drop=True)
df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
df = df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])

criteria = []
last_block = None
for _, r in df.iterrows():
    blk = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else last_block
    last_block = blk
    maxv = int(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) if pd.notna(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) and str(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]).isdigit() else 10
    criteria.append({"block": blk, "criterion": r["–ö—Ä–∏—Ç–µ—Ä–∏–π"], "requirement": r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"], "max": maxv})

def get_time():
    return datetime.now(pytz.timezone("Asia/Almaty")).strftime("%Y-%m-%d %H:%M:%S")

def log_csv(pharmacy, name, ts, score, max_score):
    path = "checklist_log.csv"
    exists = os.path.exists(path)
    with open(path, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if not exists:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, pharmacy, name, score, max_score])

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ==========
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp  = Dispatcher(storage=MemoryStorage())

# ========== –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ==========
@dp.message(commands=["start"])
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n"
        "üí° –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ò–¢-–æ—Ç–¥–µ–ª–∞ ¬´–°–∞–¥—ã—Ö–∞–Ω¬ª.\n\n"
        "‚úçÔ∏è –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤–¥—É–º—á–∏–≤–æ –∏ –Ω–µ—Å–ø–µ—à–∞ ‚Äî –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã –≤—Å–µ–≥–¥–∞.\n"
        "‚úÖ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç –ø—Ä–∏–¥—ë—Ç –≤ Excel –≤ QA-—á–∞—Ç –∏ –≤–∞–º.\n\n"
        "üèÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
    )
    await state.set_state(Form.name)

@dp.message(commands=["id"])
async def cmd_id(msg: types.Message):
    await msg.answer(f"–í–∞—à chat_id: <code>{msg.chat.id}</code>")

# ========== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ ==========
@dp.message(Form.name)
async def proc_name(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    await state.update_data(name=name, step=0, data=[], start=get_time())
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)

@dp.message(Form.pharmacy)
async def proc_pharmacy(msg: types.Message, state: FSMContext):
    await state.update_data(pharmacy=msg.text.strip())
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_quest(msg.chat.id, state)

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ==========
@dp.callback_query()
async def cb_all(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    step = data.get("step", 0)

    # –ù–∞–∑–∞–¥
    if cb.data == "prev" and step > 0:
        data["step"] -= 1
        data["data"].pop()
        await state.set_data(data)
        return await send_quest(cb.from_user.id, state)

    # –û—Ü–µ–Ω–∫–∞
    if cb.data.startswith("score_"):
        score = int(cb.data.split("_")[1])
        data.setdefault("data", []).append({"crit": criteria[step], "score": score})
        data["step"] += 1
        await state.set_data(data)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π
        await bot.edit_message_text(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            text=f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}"
        )

        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –∏–¥—ë–º –≤ conclusion
        if data["step"] >= len(criteria):
            await bot.send_message(cb.from_user.id,
                "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –≤—ã–≤–æ–¥—ã –ø–æ –∞–ø—Ç–µ–∫–µ:")
            return await state.set_state(Form.conclusion)

        return await send_quest(cb.from_user.id, state)

# ========== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ==========
async def send_quest(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    total = len(criteria)

    c = criteria[step]
    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )
    kb = InlineKeyboardBuilder()
    start = 0 if c["max"]==1 else 1
    for i in range(start, c["max"]+1):
        kb.button(str(i), callback_data=f"score_{i}")
    if step>0:
        kb.button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)
    await bot.send_message(chat_id, text, reply_markup=kb.as_markup())

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ ==========
@dp.message(Form.conclusion)
async def proc_conclusion(msg: types.Message, state: FSMContext):
    await state.update_data(conclusion=msg.text.strip())
    data = await state.get_data()
    await msg.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶")
    await make_report(msg.chat.id, data)
    await state.clear()

# ========== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ ==========
async def make_report(chat_id: int, data):
    name       = data["name"]
    ts         = data["start"]
    pharmacy   = data.get("pharmacy","‚Äî")
    conclusion = data.get("conclusion","")

    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active

    # –®–∞–ø–∫–∞
    title = (f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n"
             f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
             f"–î–∞—Ç–∞: {datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}")
    ws.merge_cells("A1:G2")
    ws["A1"] = title
    ws["A1"].font = Font(size=14, bold=True)
    ws["B3"] = pharmacy

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    headers = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"]
    for idx,h in enumerate(headers, start=1):
        cell = ws.cell(row=5, column=idx, value=h)
        cell.font = Font(bold=True)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏
    row = 6
    total_sc = total_mx = 0
    for item in data["data"]:
        c  = item["crit"]
        sc = item["score"]
        ws.cell(row,1,c["block"])
        ws.cell(row,2,c["criterion"])
        ws.cell(row,3,c["requirement"])
        ws.cell(row,4,sc)
        ws.cell(row,5,c["max"])
        ws.cell(row,7,ts)
        total_sc += sc
        total_mx += c["max"]
        row += 1

    # –ò—Ç–æ–≥–æ
    ws.cell(row+1,3,"–ò–¢–û–ì–û:")
    ws.cell(row+1,4,total_sc)
    ws.cell(row+2,3,"–ú–∞–∫—Å–∏–º—É–º:")
    ws.cell(row+2,4,total_mx)

    # –í—ã–≤–æ–¥—ã –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ
    ws.cell(row+4,1,"–í—ã–≤–æ–¥—ã –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ:")
    ws.merge_cells(start_row=row+4, start_column=2, end_row=row+4, end_column=6)
    ws.cell(row+4,2,conclusion)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    fname = f"{pharmacy}_{name}_{ts[:10]}.xlsx".replace(" ","_")
    wb.save(fname)
    with open(fname,"rb") as f:
        await bot.send_document(QA_CHAT_ID, FSInputFile(f))
    with open(fname,"rb") as f:
        await bot.send_document(chat_id, FSInputFile(f))
    os.remove(fname)

    log_csv(pharmacy, name, ts, total_sc, total_mx)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id,
        "üìå –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ QA-—á–∞—Ç –∏ –≤–∞–º.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ ‚Äî /start")

# ========== Webhook & –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ==========
async def handle_webhook(request: web.Request):
    data = await request.json()
    upd  = Update(**data)
    await dp.feed_update(bot, upd)
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –≤–µ–±—Ö—É–∫, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π URL:
    # await bot.set_webhook(os.getenv("WEBHOOK_URL"), drop_pending_updates=True)
    pass

app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)
