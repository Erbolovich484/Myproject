import logging
import os
import csv
import pytz
from datetime import datetime
from dotenv import load_dotenv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Update
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties

from aiohttp import web

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")
QA_CHAT_ID     = int(os.getenv("CHAT_ID", "0"))
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
LOG_PATH       = os.getenv("LOG_PATH", "checklist_log.csv")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")      # https://<app>.onrender.com/webhook
PORT           = int(os.getenv("PORT", "8000"))

# === FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    name       = State()
    pharmacy   = State()
    rating     = State()
    conclusion = State()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ ===
_raw = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_i = _raw[_raw.iloc[:,0] == "–ë–ª–æ–∫"].index[0] + 1
_df = _raw.iloc[start_i:,:8].reset_index(drop=True)
_df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
_df = _df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])
criteria = []
_last = None
for _, row in _df.iterrows():
    block = row["–ë–ª–æ–∫"] if pd.notna(row["–ë–ª–æ–∫"]) else _last
    _last = block
    maxv = int(row["–ú–∞–∫—Å"]) if pd.notna(row["–ú–∞–∫—Å"]) and str(row["–ú–∞–∫—Å"]).isdigit() else 10
    criteria.append({
        "block": block,
        "criterion": row["–ö—Ä–∏—Ç–µ—Ä–∏–π"],
        "requirement": row["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
        "max": maxv
    })

# === –£—Ç–∏–ª–∏—Ç—ã ===
def now_ts() -> str:
    return datetime.now(pytz.timezone("Asia/Almaty")).strftime("%Y-%m-%d %H:%M:%S")

def log_csv(pharmacy: str, name: str, ts: str, score: int, max_score: int):
    first = not os.path.exists(LOG_PATH)
    with open(LOG_PATH, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if first:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–§–ò–û","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, pharmacy, name, score, max_score])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
session = AiohttpSession()
bot = Bot(
    token=API_TOKEN,
    session=session,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# === /start ===
@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    logging.debug(f"CMD /start from {msg.from_user.id}")
    await state.clear()
    await msg.answer(
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n\n"
        "¬© –ò–¢-—Å–ª—É–∂–±–∞ ¬´–°–∞–¥—ã—Ö–∞–Ω¬ª. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —á–µ–∫-–ª–∏—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ QA-—á–∞—Ç.\n\n"
        "üèÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.name)

# === –°–±–æ—Ä –§–ò–û ===
@dp.message(Form.name)
async def name_handler(msg: types.Message, state: FSMContext):
    logging.debug(f"Received name: {msg.text!r}")
    await state.update_data(name=msg.text.strip(), step=0, data=[], start=now_ts())
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)

# === –°–±–æ—Ä –∞–ø—Ç–µ–∫–∏ ===
@dp.message(Form.pharmacy)
async def pharm_handler(msg: types.Message, state: FSMContext):
    logging.debug(f"Received pharmacy: {msg.text!r}")
    await state.update_data(pharmacy=msg.text.strip())
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_question(msg.chat.id, state)

# === Callback –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query()
async def cb_handler(cb: types.CallbackQuery, state: FSMContext):
    logging.debug(f"Callback received: {cb.data}")
    await cb.answer()  # —Å–±—Ä–æ—Å —Ç–∞–π–º–∞—É—Ç–∞
    data = await state.get_data()
    step = data.get("step", 0)

    if cb.data == "prev" and step > 0:
        data["step"] -= 1
        data["data"].pop()
        await state.set_data(data)
        return await send_question(cb.from_user.id, state)

    if cb.data.startswith("score_"):
        score = int(cb.data.split("_")[1])
        if step < len(criteria):
            data.setdefault("data", []).append({"crit": criteria[step], "score": score})
            data["step"] += 1
            await state.set_data(data)
        await bot.edit_message_text(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            text=f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}"
        )
        return await send_question(cb.from_user.id, state)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å –ª–æ–≥–∞–º–∏ –∏ –∑–∞—â–∏—Ç–æ–π) ===
async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    total = len(criteria)
    logging.debug(f"send_question: step={step}/{total} to {chat_id}")

    if step >= total:
        await bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–≤–æ–¥ –ø–æ –∞–ø—Ç–µ–∫–µ:")
        return await state.set_state(Form.conclusion)

    c = criteria[step]
    logging.debug(f"Criterion #{step+1}: block={c['block']!r}, max={c['max']}")

    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )

    kb = InlineKeyboardBuilder()
    start = 0 if c["max"] == 1 else 1
    for i in range(start, c["max"]+1):
        kb.button(text=str(i), callback_data=f"score_{i}")
    if step > 0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    try:
        await bot.send_message(
            chat_id,
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=kb.as_markup()
        )
        logging.debug("Question sent successfully")
    except Exception as e:
        logging.error(f"Failed to send question #{step+1}: {e}", exc_info=True)

# === –°–±–æ—Ä –≤—ã–≤–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ ===
@dp.message(Form.conclusion)
async def conclusion_handler(msg: types.Message, state: FSMContext):
    logging.debug(f"Received conclusion: {msg.text!r}")
    await state.update_data(conclusion=msg.text.strip())
    data = await state.get_data()

    ts      = data["start"]
    name    = data["name"]
    pharm   = data["pharmacy"]
    answers = data["data"]
    concl   = data.get("conclusion", "")

    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active

    title = (
        f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
        f"–î–∞—Ç–∞: {datetime.strptime(ts, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}"
    )
    ws.merge_cells("A1:G2")
    ws["A1"] = title
    ws["A1"].font = Font(size=14, bold=True)
    ws["B3"] = pharm

    headers = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–ë–∞–ª–ª—ã","–ú–∞–∫—Å","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"]
    for idx, h in enumerate(headers, start=1):
        cell = ws.cell(row=5, column=idx, value=h)
        cell.font = Font(bold=True)

    row = 6
    total_score = 0
    total_max   = 0
    for it in answers:
        c = it["crit"]
        s = it["score"]
        ws.cell(row,1,c["block"])
        ws.cell(row,2,c["criterion"])
        ws.cell(row,3,c["requirement"])
        ws.cell(row,4,s)
        ws.cell(row,5,c["max"])
        ws.cell(row,6,ts)
        total_score += s
        total_max   += c["max"]
        row += 1

    ws.cell(row+1, 3, "–ò–¢–û–ì–û:")
    ws.cell(row+1, 4, total_score)
    ws.cell(row+2, 3, "–ú–∞–∫—Å–∏–º—É–º:")
    ws.cell(row+2, 4, total_max)

    ws.cell(row+4, 1, "–í—ã–≤–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∞:")
    ws.merge_cells(start_row=row+4, start_column=2, end_row=row+4, end_column=7)
    ws.cell(row+4, 2, concl)

    fn = f"{pharm}_{name}_{datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d%m%Y')}.xlsx".replace(" ","_")
    wb.save(fn)

    with open(fn, "rb") as f:
        await bot.send_document(QA_CHAT_ID, FSInputFile(f, filename=fn))
    with open(fn, "rb") as f:
        await bot.send_document(msg.chat.id, FSInputFile(f, filename=fn))

    os.remove(fn)
    log_csv(pharm, name, ts, total_score, total_max)

    await msg.answer("üéâ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ QA-—á–∞—Ç –∏ –≤–∞–º.\n–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ ‚Äî /start")
    await state.clear()

# === Webhook & healthcheck ===
async def handle_webhook(request: web.Request):
    data = await request.json()
    upd  = Update(**data)
    await dp.feed_update(bot=bot, update=upd)
    return web.Response(text="OK")

async def health(request: web.Request):
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    logging.debug("Setting webhook")
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)

async def on_cleanup(app: web.Application):
    logging.debug("Deleting webhook & closing storage")
    await bot.delete_webhook()
    await storage.close()

app = web.Application()
app.router.add_get("/", health)
app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__ == "__main__":
    logging.info("Starting app")
    web.run_app(app, host="0.0.0.0", port=PORT)
