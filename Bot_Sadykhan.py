import logging
import pytz
from datetime import datetime
import asyncio
import os
import csv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# === –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")
CHAT_ID        = int(os.getenv("CHAT_ID", "0"))
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
LOG_PATH       = os.getenv("LOG_PATH", "checklist_log.csv")

ALLOWED_USERS = [
    "–ù–∏–∫–æ–ª–∞–π –ö—Ä—ã–ª–æ–≤",
    "–¢–∞–∂–¥–∏–Ω –£—Å–µ–π–Ω",
    "–ñ–∞–Ω–∞—Ä –ë”©–ª—Ç—ñ—Ä—ñ–∫",
    "–®–∞—Ä–∞ –ê–±–¥–∏–µ–≤–∞",
    "–¢–æ—Ö—Ç–∞—Ä –ß–∞—Ä–∞–±–∞—Å–æ–≤",
    "*"
]

# === –ß–¢–ï–ù–ò–ï –ö–†–ò–¢–ï–†–ò–ï–í –ò–ó EXCEL ===
criteria_df = pd.read_excel(CHECKLIST_PATH, sheet_name='–ß–µ–∫ –ª–∏—Å—Ç', header=None)
start_index = criteria_df[criteria_df.iloc[:, 0] == "–ë–ª–æ–∫"].index[0] + 1
criteria_df = criteria_df.iloc[start_index:, :8].reset_index(drop=True)
criteria_df.columns = [
    "–ë–ª–æ–∫", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–û—Ü–µ–Ω–∫–∞",
    "–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", "–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
]
criteria_df = criteria_df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])

criteria_list = []
last_block = None
for _, row in criteria_df.iterrows():
    block = row["–ë–ª–æ–∫"] if pd.notna(row["–ë–ª–æ–∫"]) else last_block
    last_block = block
    max_val = (
        int(row["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"])
        if pd.notna(row["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) and str(row["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]).isdigit()
        else 10
    )
    criteria_list.append({
        "block": block,
        "criterion": row["–ö—Ä–∏—Ç–µ—Ä–∏–π"],
        "requirement": row["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
        "max": max_val
    })

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_astana_time():
    tz = pytz.timezone("Asia/Almaty")
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

def log_checklist_submission(pharmacy, name, timestamp, score, max_score):
    exists = os.path.exists(LOG_PATH)
    with open(LOG_PATH, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        if not exists:
            writer.writerow(["–î–∞—Ç–∞", "–ê–ø—Ç–µ–∫–∞", "–§–ò–û –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ", "–§–∞–∫—Ç", "–ú–∞–∫—Å. –±–∞–ª–ª"])
        writer.writerow([timestamp, pharmacy, name, score, max_score])

# === FSM –°–¢–ï–ô–¢–´ ===
class Form(StatesGroup):
    name     = State()
    pharmacy = State()
    rating   = State()

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# === –•–ê–ù–î–õ–ï–†–´ ===
@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    intro = (
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n\n"
        "–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –æ—Ç—á–µ—Ç –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "üèÅ –ù–∞—á–Ω–µ–º!"
    )
    await message.answer(intro, parse_mode=ParseMode.HTML)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(Form.name)

@router.message(F.text == "/–ª–æ–≥")
async def send_log_file(message: types.Message):
    if os.path.exists(LOG_PATH):
        await message.answer_document(FSInputFile(LOG_PATH))
    else:
        await message.answer("–õ–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")

@router.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    user_name = message.text.strip()
    if user_name in ALLOWED_USERS or "*" in ALLOWED_USERS:
        await state.update_data(name=user_name, step=0, data=[], start_time=get_astana_time())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
        await state.set_state(Form.pharmacy)
    else:
        await message.answer("–§–ò–û –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ò–¢-–æ—Ç–¥–µ–ª.")

@router.message(Form.pharmacy)
async def process_pharmacy(message: types.Message, state: FSMContext):
    await state.update_data(pharmacy=message.text.strip())
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_criterion(message.chat.id, state)

@router.callback_query(F.data.startswith("score_") | F.data == "prev")
async def process_score(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç–æ")
    data = await state.get_data()
    step = data.get('step', 0)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    if callback.data == "prev":
        if step > 0:
            data['step'] -= 1
            data['data'].pop()
            await state.set_data(data)
        return await send_criterion(callback.from_user.id, state)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    score = int(callback.data.split("_")[1])
    if step < len(criteria_list):
        data.setdefault('data', []).append({"criterion": criteria_list[step], "score": score})
        data['step'] += 1
        await state.set_data(data)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}"
    )
    await send_criterion(callback.from_user.id, state)

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_criterion(chat_id, state: FSMContext):
    data = await state.get_data()
    step = data['step']
    total = len(criteria_list)

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    if step >= total:
        await bot.send_message(chat_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶")
        await generate_and_send_excel(chat_id, data)
        await bot.send_message(chat_id, "–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ ‚Äî /start")
        return await state.clear()

    c = criteria_list[step]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –µ—Å–ª–∏ max=1 ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0 –∏ 1, –∏–Ω–∞—á–µ –æ—Ç 1 –¥–æ max
    kb = InlineKeyboardBuilder()
    start_score = 0 if c['max'] == 1 else 1
    for i in range(start_score, c['max'] + 1):
        kb.button(text=str(i), callback_data=f"score_{i}")
    if step > 0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    await bot.send_message(
        chat_id,
        msg,
        parse_mode=ParseMode.HTML,
        reply_markup=kb.as_markup()
    )

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Excel-–æ—Ç—á–µ—Ç–∞ ===
async def generate_and_send_excel(chat_id, session):
    name     = session['name']
    timestamp= session['start_time']
    pharmacy = session.get('pharmacy', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = (
        f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
        f"–î–∞—Ç–∞: {datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}\n"
        "–û—Ñ–æ—Ä–º–ª–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç"
    )
    ws.merge_cells('A1:G2')
    ws['A1'] = title
    ws['A1'].font = Font(size=14, bold=True)

    ws['B3'] = pharmacy

    # –®–∞–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    headers = ["–ë–ª–æ–∫", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–û—Ü–µ–Ω–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞", "–ú–∞–∫—Å. –æ—Ü–µ–Ω–∫–∞", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"]
    for idx, h in enumerate(headers, start=1):
        cell = ws.cell(row=5, column=idx, value=h)
        cell.font = Font(bold=True)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    row = 6
    total_score = 0
    total_max   = 0
    for item in session['data']:
        c = item['criterion']
        sc= item['score']
        ws.cell(row=row, column=1, value=c['block'])
        ws.cell(row=row, column=2, value=c['criterion'])
        ws.cell(row=row, column=3, value=c['requirement'])
        ws.cell(row=row, column=4, value=sc)
        ws.cell(row=row, column=5, value=c['max'])
        ws.cell(row=row, column=7, value=timestamp)
        total_score += sc
        total_max   += c['max']
        row += 1

    # –ò—Ç–æ–≥–æ
    ws.cell(row=row+1, column=3, value="–ò–¢–û–ì–û:")
    ws.cell(row=row+1, column=4, value=total_score)
    ws.cell(row=row+2, column=3, value="–ú–∞–∫—Å–∏–º—É–º:")
    ws.cell(row=row+2, column=4, value=total_max)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    date_str = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y")
    filename = f"{pharmacy}_{name}_{date_str}.xlsx".replace(" ", "_")
    wb.save(filename)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç
    with open(filename, "rb") as f:
        await bot.send_document(CHAT_ID, types.BufferedInputFile(f.read(), filename=filename))

    # –õ–æ–∫–∞–ª—å–Ω—ã–π cleanup –∏ –ª–æ–≥
    os.remove(filename)
    log_checklist_submission(pharmacy, name, timestamp, total_score, total_max)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
