import logging
import os
import csv
import pytz
from datetime import datetime
from dotenv import load_dotenv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Update

# === –ó–∞–≥—Ä—É–∂–∞–µ–º .env ===
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")
QA_CHAT_ID     = int(os.getenv("CHAT_ID", "0"))
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
LOG_PATH       = os.getenv("LOG_PATH", "checklist_log.csv")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä https://<your-domain>/webhook
PORT           = int(os.getenv("PORT", "8080"))

# === FSM ===
class Form(StatesGroup):
    name     = State()
    pharmacy = State()
    rating   = State()
    comment  = State()

# === –ß–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ Excel ===
_df = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_i = _df[_df.iloc[:,0]=="–ë–ª–æ–∫"].index[0] + 1
_df = _df.iloc[start_i:,:8].reset_index(drop=True)
_df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
_df = _df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])
criteria = []
_last_blk = None
for _, r in _df.iterrows():
    blk = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else _last_blk
    _last_blk = blk
    maxv = int(r["–ú–∞–∫—Å"]) if pd.notna(r["–ú–∞–∫—Å"]) and str(r["–ú–∞–∫—Å"]).isdigit() else 10
    criteria.append({
        "block": blk,
        "criterion": r["–ö—Ä–∏—Ç–µ—Ä–∏–π"],
        "requirement": r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
        "max": maxv
    })

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def now_str():
    tz = pytz.timezone("Asia/Almaty")
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

def log_csv(pharmacy, name, ts, score, max_score):
    exists = os.path.exists(LOG_PATH)
    with open(LOG_PATH, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if not exists:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, pharmacy, name, score, max_score])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp  = Dispatcher(storage=MemoryStorage())

# === –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ===
@dp.message(Command("start"))
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n"
        "üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ò–¢ ¬´–°–∞–¥—ã—Ö–∞–Ω¬ª\n\n"
        "–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤–¥—É–º—á–∏–≤–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.\n"
        "–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç –ø—Ä–∏–¥—ë—Ç –≤ QA-—á–∞—Ç –∏ –≤–∞–º –≤ –ª–∏—á–∫—É.\n\n"
        "üèÅ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
    )
    await state.set_state(Form.name)

@dp.message(Command("id"))
async def cmd_id(msg: types.Message):
    await msg.answer(f"–í–∞—à chat_id: <code>{msg.chat.id}</code>")

@dp.message(Command("–ª–æ–≥"))
async def cmd_log(msg: types.Message):
    if os.path.exists(LOG_PATH):
        await msg.answer_document(FSInputFile(LOG_PATH))
    else:
        await msg.answer("–õ–æ–≥ –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")

@dp.message(Command("—Å–±—Ä–æ—Å"))
async def cmd_reset(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. /start ‚Äî —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –≤–≤–æ–¥ –∞–ø—Ç–µ–∫–∏ ===
@dp.message(Form.name)
async def proc_name(msg: types.Message, state: FSMContext):
    user = msg.text.strip()
    await state.update_data(name=user, step=0, answers=[], start=now_str())
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)

@dp.message(Form.pharmacy)
async def proc_pharmacy(msg: types.Message, state: FSMContext):
    await state.update_data(pharmacy=msg.text.strip())
    await msg.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_question(msg.chat.id, state)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query()
async def cb_all(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()  # —É—Å—Ç—Ä–∞–Ω—è–µ–º ¬´query is too old¬ª
    data = await state.get_data()
    step = data.get("step", 0)

    # –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞
    if cb.data.startswith("score_"):
        score = int(cb.data.split("_")[1])
        data["answers"].append({"crit": criteria[step], "score": score})
        data["step"] += 1
        await state.set_data(data)
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            text=f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}"
        )
        return await send_question(cb.from_user.id, state)

    # ¬´–Ω–∞–∑–∞–¥¬ª
    if cb.data == "prev" and step>0:
        data["step"] -= 1
        data["answers"].pop()
        await state.set_data(data)
        return await send_question(cb.from_user.id, state)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    total = len(criteria)

    if step >= total:
        await bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶")
        await state.set_state(Form.comment)
        return await bot.send_message(chat_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –≤—ã–≤–æ–¥—ã –ø–æ –∞–ø—Ç–µ–∫–µ:")

    c = criteria[step]
    kb = InlineKeyboardBuilder()
    start = 0 if c["max"]==1 else 1
    for i in range(start, c["max"]+1):
        kb.button(str(i), callback_data=f"score_{i}")
    if step>0:
        kb.button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )
    await bot.send_message(chat_id, text, reply_markup=kb.as_markup())

# === –°–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è + –æ—Ç—á—ë—Ç ===
@dp.message(Form.comment)
async def proc_comment(msg: types.Message, state: FSMContext):
    data       = await state.get_data()
    comment    = msg.text.strip()
    data["comment"] = comment

    # —Å—Ç—Ä–æ–∏–º Excel
    wb   = load_workbook(TEMPLATE_PATH)
    ws   = wb.active
    ts   = data["start"]
    name = data["name"]
    pharm = data["pharmacy"]

    # —à–∞–ø–∫–∞
    ws.merge_cells("A1:G2")
    ws["A1"] = f"–û—Ç—á—ë—Ç –ø–æ –∞–ø—Ç–µ–∫–µ: {pharm}\n–ü—Ä–æ–≤–µ—Ä–∏–ª: {name}\n–î–∞—Ç–∞: {datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}"
    ws["A1"].font = Font(size=14, bold=True)
    ws["B3"]    = pharm

    # –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    headers = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π","–î–∞—Ç–∞"]
    for i,h in enumerate(headers,1):
        cell = ws.cell(row=5, column=i, value=h)
        cell.font = Font(bold=True)

    row = 6
    total_sc = total_max = 0
    for item in data["answers"]:
        c = item["crit"]
        sc = item["score"]
        ws.cell(row,1, c["block"])
        ws.cell(row,2, c["criterion"])
        ws.cell(row,3, c["requirement"])
        ws.cell(row,4, sc)
        ws.cell(row,5, c["max"])
        ws.cell(row,6, "")        # –ø—É—Å—Ç–æ –ø–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        ws.cell(row,7, ts)
        total_sc += sc
        total_max += c["max"]
        row += 1

    # –∏—Ç–æ–≥–∏ –∏ –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    ws.cell(row+1,3,"–ò–¢–û–ì–û:")
    ws.cell(row+1,4,total_sc)
    ws.cell(row+2,3,"–ú–∞–∫—Å–∏–º—É–º:")
    ws.cell(row+2,4,total_max)
    ws.cell(row+4,1,"–í—ã–≤–æ–¥—ã –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ:")
    ws.merge_cells(start_row=row+4, start_column=1, end_row=row+8, end_column=7)
    ws.cell(row+4,1, data["comment"])

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    fn = f"{pharm}_{name}_{datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}.xlsx"
    wb.save(fn)
    with open(fn, "rb") as f:
        # –≤ QA-—á–∞—Ç
        await bot.send_document(QA_CHAT_ID, FSInputFile(f, fn))
    with open(fn, "rb") as f:
        # –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_document(msg.chat.id, FSInputFile(f, fn))
    os.remove(fn)

    # –ª–æ–≥–∏—Ä—É–µ–º
    log_csv(pharm, name, ts, total_sc, total_max)
    await msg.answer("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /start")
    await state.clear()

# === Webhook & –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
async def handle_webhook(req: web.Request):
    data = await req.json()
    upd  = Update(**data)
    await dp.feed_update(bot, upd)
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Webhook: {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)

async def on_cleanup(app: web.Application):
    await bot.delete_webhook()

app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__ == "__main__":
    logging.info(f"–°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    web.run_app(app, host="0.0.0.0", port=PORT)
