import os
import csv
import logging
import pytz

from datetime import datetime
from dotenv import load_dotenv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, Update
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env –∏–ª–∏ Railway Variables) ===
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")
CHAT_ID        = int(os.getenv("CHAT_ID", "0"))            # –≤–∞—à QA-—á–∞—Ç
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
LOG_PATH       = os.getenv("LOG_PATH", "checklist_log.csv")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")                   # –Ω–∞–ø—Ä–∏–º–µ—Ä https://<–≤–∞—à-—Å–µ—Ä–≤–∏—Å>.railway.app/webhook
PORT           = int(os.getenv("PORT", "8000"))

# === FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    name     = State()
    pharmacy = State()
    rating   = State()

# === –ß—Ç–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ Excel ===
_df = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_idx = _df[_df.iloc[:,0] == "–ë–ª–æ–∫"].index[0] + 1
_df = _df.iloc[start_idx:,:8].reset_index(drop=True)
_df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
_df = _df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])

criteria = []
_last_block = None
for _, row in _df.iterrows():
    block = row["–ë–ª–æ–∫"] if pd.notna(row["–ë–ª–æ–∫"]) else _last_block
    _last_block = block
    maxv = int(row["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) if pd.notna(row["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) and str(row["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]).isdigit() else 10
    criteria.append({
        "block":       block,
        "criterion":   row["–ö—Ä–∏—Ç–µ—Ä–∏–π"],
        "requirement": row["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
        "max":         maxv
    })

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_time():
    return datetime.now(pytz.timezone("Asia/Almaty")).strftime("%Y-%m-%d %H:%M:%S")

def log_csv(pharmacy, name, ts, score, max_score):
    header = not os.path.exists(LOG_PATH)
    with open(LOG_PATH, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if header:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, pharmacy, name, score, max_score])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
session = AiohttpSession()
bot = Bot(
    token=API_TOKEN,
    session=session,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(bot=bot, storage=MemoryStorage())

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    intro = (
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n\n"
        "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ò–¢-–æ—Ç–¥–µ–ª–∞ ¬´–°–∞–¥—ã—Ö–∞–Ω¬ª.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤–¥—É–º—á–∏–≤–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.\n"
        "–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ QA-—á–∞—Ç.\n\n"
        "üèÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:"
    )
    await message.answer(intro)
    await state.set_state(Form.name)

@dp.message(F.text == "/id")
async def cmd_id(message: types.Message):
    await message.answer(f"–í–∞—à chat_id: <code>{message.chat.id}</code>")

@dp.message(F.text == "/–ª–æ–≥")
async def cmd_log(message: types.Message):
    if os.path.exists(LOG_PATH):
        await message.answer_document(FSInputFile(LOG_PATH))
    else:
        await message.answer("–õ–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")

@dp.message(F.text == "/—Å–±—Ä–æ—Å")
async def cmd_reset(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /start")

# === –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –§–ò–û –∏ –∞–ø—Ç–µ–∫–∏ ===
@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name, step=0, data=[], start=get_time())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)

@dp.message(Form.pharmacy)
async def process_pharmacy(message: types.Message, state: FSMContext):
    await state.update_data(pharmacy=message.text.strip())
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_question(message.chat.id, state)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query()
async def callback_handler(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()  # –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π ACK
    data = await state.get_data()
    step = data.get("step", 0)

    # –ù–∞–∑–∞–¥
    if cb.data == "prev" and step > 0:
        data["step"] -= 1
        data["data"].pop()
        await state.set_data(data)
        return await send_question(cb.from_user.id, state)

    # –û—Ü–µ–Ω–∫–∞
    if cb.data.startswith("score_"):
        score = int(cb.data.split("_")[1])
        if step < len(criteria):
            data.setdefault("data", []).append({
                "crit":  criteria[step],
                "score": score
            })
            data["step"] += 1
            await state.set_data(data)

        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            text=f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}"
        )
        return await send_question(cb.from_user.id, state)

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    total = len(criteria)

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –æ—Ç—á—ë—Ç
    if step >= total:
        await bot.send_message(chat_id, "üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶")
        return await make_report(chat_id, data)

    c = criteria[step]
    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )
    kb = InlineKeyboardBuilder()
    start = 0 if c["max"] == 1 else 1
    for i in range(start, c["max"]+1):
        kb.button(text=str(i), callback_data=f"score_{i}")
    if step > 0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(min(c["max"]+1, 5))

    await bot.send_message(chat_id, text,
                           parse_mode=ParseMode.HTML,
                           reply_markup=kb.as_markup())

# === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ ===
async def make_report(chat_id: int, data: dict):
    name     = data["name"]
    ts       = data["start"]
    pharmacy = data.get("pharmacy", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active

    title = (
        f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
        f"–î–∞—Ç–∞: {datetime.strptime(ts, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}"
    )
    ws.merge_cells("A1:G2")
    ws["A1"] = title
    ws["A1"].font = Font(size=14, bold=True)
    ws["B3"] = pharmacy

    headers = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞"]
    for idx, h in enumerate(headers, start=1):
        cell = ws.cell(row=5, column=idx, value=h)
        cell.font = Font(bold=True)

    row = 6
    total_score = 0
    total_max   = 0
    for item in data["data"]:
        c  = item["crit"]
        sc = item["score"]
        ws.cell(row, 1, c["block"])
        ws.cell(row, 2, c["criterion"])
        ws.cell(row, 3, c["requirement"])
        ws.cell(row, 4, sc)
        ws.cell(row, 5, c["max"])
        ws.cell(row, 7, ts)
        total_score += sc
        total_max   += c["max"]
        row += 1

    ws.cell(row+1, 3, "–ò–¢–û–ì–û:")
    ws.cell(row+1, 4, total_score)
    ws.cell(row+2, 3, "–ú–∞–∫—Å–∏–º—É–º:")
    ws.cell(row+2, 4, total_max)

    filename = f"{pharmacy}_{name}_{ts[:10].replace('-','_')}.xlsx".replace(" ", "_")
    wb.save(filename)

    # 1) –≤ QA-—á–∞—Ç
    with open(filename, "rb") as f:
        await bot.send_document(CHAT_ID, FSInputFile(f, filename))
    # 2) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(filename, "rb") as f:
        await bot.send_document(chat_id, FSInputFile(f, filename))
    os.remove(filename)
    log_csv(pharmacy, name, ts, total_score, total_max)

    await bot.send_message(chat_id,
        "‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ QA-—á–∞—Ç.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑ ‚Äî /start"
    )

# === Webhook & healthcheck –¥–ª—è Railway ===
async def handle_webhook(request: web.Request):
    payload = await request.json()
    upd     = Update(**payload)
    await dp.feed_update(update=upd, bot=bot)
    return web.Response(text="OK")

async def health(request: web.Request):
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Webhook: %s", WEBHOOK_URL)
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)

async def on_cleanup(app: web.Application):
    await bot.delete_webhook()
    await dp.storage.close()

app = web.Application()
app.router.add_get("/", health)
app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__ == "__main__":
    logger.info("–°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É %s‚Ä¶", PORT)
    web.run_app(app, host="0.0.0.0", port=PORT)
