import logging
import os
import csv
import pytz
from datetime import datetime
from dotenv import load_dotenv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Update
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties

from aiohttp import web

# === –ó–ê–ì–†–£–ó–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø ===
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")
CHAT_ID        = int(os.getenv("CHAT_ID", "0"))
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
LOG_PATH       = os.getenv("LOG_PATH", "checklist_log.csv")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")      # https://<your-app>.onrender.com/webhook
PORT           = int(os.getenv("PORT", "8000"))

ALLOWED_USERS = ["–ù–∏–∫–æ–ª–∞–π –ö—Ä—ã–ª–æ–≤","–¢–∞–∂–¥–∏–Ω –£—Å–µ–π–Ω","–ñ–∞–Ω–∞—Ä –ë”©–ª—Ç—ñ—Ä—ñ–∫","–®–∞—Ä–∞ –ê–±–¥–∏–µ–≤–∞","–¢–æ—Ö—Ç–∞—Ä –ß–∞—Ä–∞–±–∞—Å–æ–≤","*"]

# === FSM ===
class Form(StatesGroup):
    name     = State()
    pharmacy = State()
    rating   = State()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ ===
criteria_df = pd.read_excel(CHECKLIST_PATH, sheet_name='–ß–µ–∫ –ª–∏—Å—Ç', header=None)
start_i = criteria_df[criteria_df.iloc[:,0]=="–ë–ª–æ–∫"].index[0] + 1
criteria_df = criteria_df.iloc[start_i:,:8].reset_index(drop=True)
criteria_df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
criteria_df = criteria_df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])
criteria_list, last_block = [], None
for _, r in criteria_df.iterrows():
    block = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else last_block
    last_block = block
    maxv = int(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) if pd.notna(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) and str(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]).isdigit() else 10
    criteria_list.append({"block": block, "criterion": r["–ö—Ä–∏—Ç–µ—Ä–∏–π"], "requirement": r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"], "max": maxv})

# === –£—Ç–∏–ª–∏—Ç—ã ===
def get_astana_time():
    return datetime.now(pytz.timezone("Asia/Almaty")).strftime("%Y-%m-%d %H:%M:%S")

def log_submission(pharmacy, name, ts, score, max_score):
    exists = os.path.exists(LOG_PATH)
    with open(LOG_PATH, 'a', newline='', encoding='utf-8') as f:
        w = csv.writer(f)
        if not exists:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–§–ò–û","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, pharmacy, name, score, max_score])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
session = AiohttpSession()
bot = Bot(token=API_TOKEN, session=session, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# === –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ===
@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:", parse_mode=ParseMode.HTML)
    await state.set_state(Form.name)

@dp.message(F.text == "/id")
async def cmd_id(msg: types.Message):
    await msg.answer(f"–í–∞—à chat_id: <code>{msg.chat.id}</code>", parse_mode=ParseMode.HTML)

@dp.message(F.text == "/–ª–æ–≥")
async def cmd_log(msg: types.Message):
    if os.path.exists(LOG_PATH):
        await msg.answer_document(FSInputFile(LOG_PATH))
    else:
        await msg.answer("–õ–æ–≥ –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")

@dp.message(F.text == "/—Å–±—Ä–æ—Å")
async def cmd_reset(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. /start ‚Äî —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
@dp.message(Form.name)
async def process_name(msg: types.Message, state: FSMContext):
    user = msg.text.strip()
    if user in ALLOWED_USERS or "*" in ALLOWED_USERS:
        await state.update_data(name=user, step=0, data=[], start=get_astana_time())
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
        await state.set_state(Form.pharmacy)
    else:
        await msg.answer("–§–ò–û –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ò–¢-–æ—Ç–¥–µ–ª.")

@dp.message(Form.pharmacy)
async def process_pharmacy(msg: types.Message, state: FSMContext):
    await state.update_data(pharmacy=msg.text.strip())
    await msg.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_criterion(msg.chat.id, state)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫ ===
@dp.callback_query(F.data.startswith("score_") | F.data == "prev")
async def score_handler(cb: types.CallbackQuery, state: FSMContext):
    logging.info(f"Raw callback data: {cb.data}")
    await cb.answer("‚úîÔ∏è")
    data = await state.get_data(); step = data.get("step",0)
    if cb.data=="prev" and step>0:
        data["step"]-=1; data["data"].pop()
        await state.set_data(data)
        return await send_criterion(cb.from_user.id, state)
    sc = int(cb.data.split("_")[1])
    if step < len(criteria_list):
        data.setdefault("data",[]).append({"crit":criteria_list[step],"score":sc})
        data["step"]+=1
        await state.set_data(data)
    await bot.edit_message_text(cb.message.chat.id, cb.message.message_id,
        f"‚úÖ –û—Ü–µ–Ω–∫–∞: {sc} {'‚≠ê'*sc}")
    await send_criterion(cb.from_user.id, state)

async def send_criterion(chat_id, state: FSMContext):
    data = await state.get_data(); step=data["step"]; total=len(criteria_list)
    if step>=total:
        await bot.send_message(chat_id,"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶")
        await generate_and_send(chat_id,data)
        await bot.send_message(chat_id,"–ì–æ—Ç–æ–≤–æ! /start")
        return await state.clear()
    c=criteria_list[step]
    msg=(f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
         f"<b>–ë–ª–æ–∫:</b> {c['block']}\n\n"
         f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n\n"
         f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n\n"
         f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}")
    kb=InlineKeyboardBuilder()
    start=0 if c["max"]==1 else 1
    for i in range(start,c["max"]+1):
        kb.button(text=str(i),callback_data=f"score_{i}")
    if step>0: kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",callback_data="prev")
    kb.adjust(5)
    await bot.send_message(chat_id,msg,parse_mode=ParseMode.HTML,reply_markup=kb.as_markup())

async def generate_and_send(chat_id,data):
    name=data["name"]; ts=data["start"]; pharm=data.get("pharmacy","–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    wb=load_workbook(TEMPLATE_PATH); ws=wb.active
    title=(f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
           f"–î–∞—Ç–∞: {datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}")
    ws.merge_cells("A1:G2"); ws["A1"]=title; ws["A1"].font=Font(size=14,bold=True)
    ws["B3"]=pharm
    hdr=["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞","–ú–∞–∫—Å. –æ—Ü–µ–Ω–∫–∞","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"]
    for idx,h in enumerate(hdr,1): cell=ws.cell(row=5,column=idx,value=h); cell.font=Font(bold=True)
    row=6; tscr=0; tmax=0
    for it in data["data"]:
        c=it["crit"]; sc=it["score"]
        ws.cell(row,1,c["block"]); ws.cell(row,2,c["criterion"])
        ws.cell(row,3,c["requirement"]); ws.cell(row,4,sc)
        ws.cell(row,5,c["max"]); ws.cell(row,7,ts)
        tscr+=sc; tmax+=c["max"]; row+=1
    ws.cell(row+1,3,"–ò–¢–û–ì–û:"); ws.cell(row+1,4,tscr)
    ws.cell(row+2,3,"–ú–∞–∫—Å–∏–º—É–º:"); ws.cell(row+2,4,tmax)
    fn=f"{pharm}_{name}_{datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}.xlsx".replace(" ","_")
    wb.save(fn)
    with open(fn,"rb") as f: await bot.send_document(CHAT_ID,FSInputFile(f))
    os.remove(fn); log_submission(pharm,name,ts,tscr,tmax)

# === Webhook & healthcheck ===
async def handle_webhook(request:web.Request):
    data=await request.json()
    logging.info(f"Raw update: {data}")
    upd=Update(**data)
    await dp.feed_update(bot=bot, update=upd)
    return web.Response(text="OK")

async def health(request:web.Request):
    return web.Response(text="OK")

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True, allowed_updates=[])

async def on_cleanup(app):
    await bot.delete_webhook()
    await storage.close()

app=web.Application()
app.router.add_get("/",health)
app.router.add_post("/webhook",handle_webhook)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__=="__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(app,host="0.0.0.0",port=PORT)
