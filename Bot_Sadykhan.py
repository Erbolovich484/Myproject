import os
import csv
import logging
import pytz
from datetime import datetime

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, Update
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiohttp import web

# ========== –õ–æ–≥–∏ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –ö–æ–Ω—Ñ–∏–≥ –∏–∑ ENV ==========
API_TOKEN      = os.environ["API_TOKEN"]
CHAT_ID        = int(os.environ["CHAT_ID"])
TEMPLATE_PATH  = os.environ.get("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.environ.get("CHECKLIST_PATH", "checklist.xlsx")
LOG_PATH       = os.environ.get("LOG_PATH", "checklist_log.csv")

# ========== FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ==========
class Form(StatesGroup):
    name     = State()
    pharmacy = State()
    rating   = State()

# ========== –ß—Ç–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ ==========
_df = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_i = _df[_df.iloc[:,0] == "–ë–ª–æ–∫"].index[0] + 1
_df = _df.iloc[start_i:,:8].reset_index(drop=True)
_df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ",
               "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
_df = _df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])
criteria = []
_last = None
for _, r in _df.iterrows():
    blk = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else _last
    _last = blk
    maxv = int(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) if pd.notna(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) and str(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]).isdigit() else 10
    criteria.append({
        "block": blk,
        "criterion": r["–ö—Ä–∏—Ç–µ—Ä–∏–π"],
        "requirement": r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
        "max": maxv
    })

# ========== –£—Ç–∏–ª–∏—Ç—ã ==========
def now_str():
    return datetime.now(pytz.timezone("Asia/Almaty"))\
                   .strftime("%Y-%m-%d %H:%M:%S")

def log_csv(pharmacy, user, ts, score, mx):
    header = not os.path.exists(LOG_PATH)
    with open(LOG_PATH, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if header:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, pharmacy, user, score, mx])

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ FSM ==========
storage = RedisStorage.from_url(os.environ["REDIS_URL"])
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp  = Dispatcher(storage=storage)

# ========== /start ==========
@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    logger.info("CMD /start from %s", msg.from_user.id)
    await state.clear()
    await msg.answer(
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n"
        "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ ¬´–°–∞–¥—ã—Ö–∞–Ω¬ª.\n"
        "–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç –≤ Excel —É–π–¥—ë—Ç –≤ QA-—á–∞—Ç.\n\n"
        "üèÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
    )
    await state.set_state(Form.name)

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û ==========
@dp.message(Form.name)
async def proc_name(msg: types.Message, state: FSMContext):
    user = msg.text.strip()
    logger.info("Received name: %s", user)
    # —Ç—É—Ç –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å ALLOWED_USERS, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await state.update_data(name=user, step=0, data=[], start=now_str())
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–ø—Ç–µ–∫–∏ ==========
@dp.message(Form.pharmacy)
async def proc_pharmacy(msg: types.Message, state: FSMContext):
    pharm = msg.text.strip()
    logger.info("Received pharmacy: %s", pharm)
    await state.update_data(pharmacy=pharm)
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_question(msg.chat.id, state)

# ========== Callback-–∫–Ω–æ–ø–∫–∏ ==========
@dp.callback_query()
async def cb_all(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()  # —á—Ç–æ–±—ã Telegram –Ω–µ –∂–∞–ª–æ–≤–∞–ª—Å—è
    data = await state.get_data()
    step = data["step"]

    # ¬´–ù–∞–∑–∞–¥¬ª
    if cb.data == "prev" and step>0:
        data["step"] -=1
        data["data"].pop()
        await state.set_data(data)
        return await send_question(cb.from_user.id, state)

    # –û—Ü–µ–Ω–∫–∞
    if cb.data.startswith("score_"):
        score = int(cb.data.split("_")[1])
        crit  = criteria[step]
        logger.debug("Callback received: %s", cb.data)
        data.setdefault("data", []).append({"crit": crit, "score": score})
        data["step"] +=1
        await state.set_data(data)

        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            text=f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}"
        )
        return await send_question(cb.from_user.id, state)

# ========== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ==========
async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    total= len(criteria)

    if step>=total:
        await bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶")
        return await make_report(chat_id, data)

    c = criteria[step]
    logger.debug("send_question: step=%s/%s to %s", step, total, chat_id)
    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )
    kb = InlineKeyboardBuilder()
    start = 0 if c["max"]==1 else 1
    for i in range(start, c["max"]+1):
        kb.button(text=str(i), callback_data=f"score_{i}")
    if step>0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    await bot.send_message(chat_id, text, reply_markup=kb.as_markup())

# ========== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ ==========
async def make_report(chat_id: int, data):
    name     = data["name"]
    ts       = data["start"]
    pharmacy = data["pharmacy"]
    entries  = data["data"]

    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫
    ws.merge_cells("A1:G2")
    ws["A1"] = (
        f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
        f"–î–∞—Ç–∞: {datetime.strptime(ts,'%Y-%m-%d %H:%M:%S')\
            .strftime('%d.%m.%Y')}"
    )
    ws["A1"].font = Font(size=14,bold=True)
    ws["B3"] = pharmacy

    # —à–∞–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    hdr = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞"]
    for i,h in enumerate(hdr,1):
        cell = ws.cell(row=5, column=i, value=h)
        cell.font = Font(bold=True)

    row = 6
    tot_score=0
    tot_max  =0
    for it in entries:
        c  = it["crit"]
        sc = it["score"]
        ws.cell(row,1, c["block"])
        ws.cell(row,2, c["criterion"])
        ws.cell(row,3, c["requirement"])
        ws.cell(row,4, sc)
        ws.cell(row,5, c["max"])
        ws.cell(row,7, ts)
        tot_score += sc
        tot_max   += c["max"]
        row +=1

    # –≤—ã–≤–æ–¥
    ws.cell(row+1,3,"–ò–¢–û–ì–û:")
    ws.cell(row+1,4,tot_score)
    ws.cell(row+2,3,"–ú–∞–∫—Å–∏–º—É–º:")
    ws.cell(row+2,4,tot_max)

    fname = f"{pharmacy}_{name}_{ts[:10]}.xlsx".replace(" ","_")
    wb.save(fname)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞: –≤ QA-—á–∞—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(fname,"rb") as f:
        await bot.send_document(CHAT_ID, FSInputFile(f, filename=fname))
    with open(fname,"rb") as f:
        await bot.send_document(chat_id, FSInputFile(f, filename=fname))

    os.remove(fname)
    log_csv(pharmacy, name, ts, tot_score, tot_max)

    await bot.send_message(
        chat_id,
        "üìå –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ QA-—á–∞—Ç.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ ‚Äî /start"
    )

# ========== Webhook & Aiohttp ==========
async def handle_webhook(request: web.Request):
    data = await request.json()
    upd  = Update(**data)
    await dp.feed_update(bot=bot, update=upd)
    return web.Response(text="OK")

app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.router.add_get("/", lambda r: web.Response(text="OK"))

async def on_startup(app: web.Application):
    logger.info("Setting webhook‚Ä¶")
    await bot.set_webhook(
        f"https://{os.environ['FLY_APP_NAME']}.fly.dev/webhook",
        drop_pending_updates=True
    )

async def on_cleanup(app: web.Application):
    await bot.delete_webhook()
    await storage.close()

app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__ == "__main__":
    logging.getLogger("asyncio").setLevel(logging.WARNING)
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", "8080")))
