import logging
import os
import csv
import pytz
from datetime import datetime

from dotenv import load_dotenv
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import FSInputFile, Update
from aiogram.client.session.aiohttp import AiohttpSession

from aiohttp import web

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äî‚Äî‚Äî
load_dotenv()
API_TOKEN     = os.getenv("API_TOKEN")           # –≤–∞—à —Ç–æ–∫–µ–Ω
QA_CHAT_ID    = int(os.getenv("QA_CHAT_ID"))     # –∫—É–¥–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç
BASE_URL      = os.getenv("BASE_URL")            # https://–≤–∞—à–µ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.onrailway.app
WEBHOOK_PATH  = f"/webhook/{API_TOKEN}"
WEBHOOK_URL   = BASE_URL + WEBHOOK_PATH
PORT          = int(os.getenv("PORT", 8080))
REDIS_URL     = os.getenv("REDIS_URL")           # –∏–∑ Railway Add‚Äëons > Redis

if not all([API_TOKEN, QA_CHAT_ID, BASE_URL, REDIS_URL]):
    raise RuntimeError("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# ‚Äî‚Äî‚Äî FSM ‚Äî‚Äî‚Äî
class Form(StatesGroup):
    name       = State()
    pharmacy   = State()
    rating     = State()
    comment    = State()

# ‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ ‚Äî‚Äî‚Äî
df = pd.read_excel(os.getenv("CHECKLIST_PATH", "template.xlsx"), sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_i = df[df.iloc[:,0]=="–ë–ª–æ–∫"].index[0] + 1
df = df.iloc[start_i:,:8].reset_index(drop=True)
df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
df = df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])
criteria = []
last_block = None
for _, r in df.iterrows():
    blk = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else last_block
    last_block = blk
    maxv = int(r["–ú–∞–∫—Å"]) if pd.notna(r["–ú–∞–∫—Å"]) and str(r["–ú–∞–∫—Å"]).isdigit() else 10
    criteria.append({"block": blk, "criterion": r["–ö—Ä–∏—Ç–µ—Ä–∏–π"], "requirement": r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"], "max": maxv})

# ‚Äî‚Äî‚Äî –£—Ç–∏–ª–∏—Ç—ã ‚Äî‚Äî‚Äî
def now_ts():
    return datetime.now(pytz.timezone("Asia/Almaty")).strftime("%Y-%m-%d %H:%M:%S")

def log_csv(ph, nm, ts, sc, mx):
    path = os.getenv("LOG_PATH", "log.csv")
    exists = os.path.exists(path)
    with open(path, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if not exists:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–§–ò–û","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, ph, nm, sc, mx])

# ‚Äî‚Äî‚Äî –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ‚Äî‚Äî‚Äî
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

storage = RedisStorage.from_url(REDIS_URL)
session = AiohttpSession()
bot = Bot(token=API_TOKEN, session=session, parse_mode=ParseMode.HTML)
dp  = Dispatcher(storage=storage)

# ‚Äî‚Äî‚Äî –•—ç–Ω–¥–ª–µ—Ä—ã ‚Äî‚Äî‚Äî
@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    logger.info(f"CMD /start from {msg.from_user.id}")
    await state.clear()
    await msg.answer(
        "üìã <b>–ß–µ–∫‚Äë–ª–∏—Å—Ç –∞–ø—Ç–µ–∫</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –≤–¥—É–º—á–∏–≤–æ. –≠—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ò–¢‚Äë–°–∞–¥—ã—Ö–∞–Ω.\n\n"
        "üèÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
    )
    await state.set_state(Form.name)

@dp.message(Form.name)
async def proc_name(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    ts = now_ts()
    await state.update_data(name=name, step=0, answers=[], start=ts)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)

@dp.message(Form.pharmacy)
async def proc_pharmacy(msg: types.Message, state: FSMContext):
    pharm = msg.text.strip()
    await state.update_data(pharmacy=pharm)
    await msg.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_question(msg.chat.id, state)

@dp.callback_query()
async def cb_all(cb: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback: {cb.data} from {cb.from_user.id}")
    await cb.answer()  # —á—Ç–æ–±—ã Telegram –Ω–µ –∂–∞–ª–æ–≤–∞–ª—Å—è
    data = await state.get_data()
    step = data["step"]

    # –í–≤–æ–¥ –æ—Ü–µ–Ω–∫–∏
    if cb.data.startswith("score_"):
        score = int(cb.data.split("_")[1])
        data["answers"].append({"crit": criteria[step], "score": score})
        data["step"] += 1
        await state.set_data(data)
        # –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
        await bot.edit_message_text(cb.from_user.id, cb.message.message_id,
                                    f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}")
        return await send_question(cb.from_user.id, state)

@dp.message(Form.rating)
async def timeout_handler(msg: types.Message, state: FSMContext):
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–µ—Ç inline-–∫–Ω–æ–ø–∫—É ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ ¬´–ø—Ä–æ–ø—É—Å–∫¬ª
    data = await state.get_data()
    score = 0
    step = data["step"]
    data["answers"].append({"crit": criteria[step], "score": score})
    data["step"] += 1
    await state.set_data(data)
    await send_question(msg.chat.id, state)

async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step, total = data["step"], len(criteria)
    if step >= total:
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
        await state.set_state(Form.comment)
        return await bot.send_message(chat_id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥ –ø–æ –∞–ø—Ç–µ–∫–µ:")
    crit = criteria[step]
    kb = InlineKeyboardBuilder()
    start = 0 if crit["max"]==1 else 1
    for i in range(start, crit["max"]+1):
        kb.button(str(i), callback_data=f"score_{i}")
    kb.adjust(5)
    text = (f"<b>–í–æ–ø—Ä–æ—Å {step+1}/{total}</b>\n"
            f"<b>–ë–ª–æ–∫:</b> {crit['block']}\n"
            f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {crit['criterion']}\n"
            f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {crit['requirement']}\n"
            f"<b>–ú–∞–∫—Å:</b> {crit['max']}")
    await bot.send_message(chat_id, text, reply_markup=kb.as_markup())

@dp.message(Form.comment)
async def proc_comment(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    data["comment"] = msg.text.strip()
    await state.set_data(data)
    await bot.send_message(msg.chat.id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶")
    await make_report(msg.chat.id, data)
    await state.clear()

async def make_report(user_id: int, data: dict):
    wb = load_workbook(os.getenv("TEMPLATE_PATH","template.xlsx"))
    ws = wb.active
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫
    ws.merge_cells("A1:G2")
    ws["A1"] = (f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {data['name']}\n"
                f"–î–∞—Ç–∞: {datetime.strptime(data['start'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')}")
    ws["A1"].font = Font(size=14, bold=True)
    ws["B3"] = data["pharmacy"]
    # —à–∞–ø–∫–∞
    headers = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π","–í—ã–≤–æ–¥"]
    for idx, h in enumerate(headers, start=1):
        ws.cell(row=5, column=idx, value=h).font = Font(bold=True)
    # —Å—Ç—Ä–æ–∫–∏
    row = 6; total=0; total_max=0
    for ans in data["answers"]:
        crit, sc = ans["crit"], ans["score"]
        ws.cell(row,1,crit["block"])
        ws.cell(row,2,crit["criterion"])
        ws.cell(row,3,crit["requirement"])
        ws.cell(row,4,sc)
        ws.cell(row,5,crit["max"])
        ws.cell(row,6,"‚Äî")
        ws.cell(row,7,data["comment"] if row==6 else "")
        total += sc; total_max+=crit["max"]
        row +=1
    ws.cell(row,3,"–ò–¢–û–ì–û:"); ws.cell(row,4,total)
    ws.cell(row+1,3,"–ú–∞–∫—Å–∏–º—É–º:"); ws.cell(row+1,4,total_max)
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    fname = f"{data['pharmacy']}_{data['name']}_{datetime.now().strftime('%d%m%Y_%H%M')}.xlsx".replace(" ","_")
    wb.save(fname)

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∞–º–æ–º—É –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–º—É
    with open(fname,"rb") as f:
        await bot.send_document(user_id, FSInputFile(f, filename=fname))
    # –∏ –≤ QA-—á–∞—Ç
    with open(fname,"rb") as f:
        await bot.send_document(QA_CHAT_ID, FSInputFile(f, filename=fname))

    os.remove(fname)
    log_csv(data["pharmacy"], data["name"], data["start"], total, total_max)
    await bot.send_message(user_id, "‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /start")

# ‚Äî‚Äî‚Äî Webhook & –∑–∞–ø—É—Å–∫ ‚Äî‚Äî‚Äî
app = web.Application()
app.router.add_post(WEBHOOK_PATH, lambda r: handle_update(r))
app.router.add_get("/", lambda r: web.Response(text="OK"))
async def handle_update(request: web.Request):
    data = await request.json()
    upd  = Update(**data)
    await dp.feed_update(bot, upd)
    return web.Response(text="OK")

async def on_startup(app):
    logger.info("Setting webhook to %s", WEBHOOK_URL)
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)

async def on_shutdown(app):
    await bot.delete_webhook()
    await storage.close()

app.on_startup.append(on_startup)
app.on_cleanup.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)
