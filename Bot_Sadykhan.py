import logging, os, csv, pytz
from datetime import datetime
from dotenv import load_dotenv
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Update
from aiohttp import web

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ ===
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")
CHAT_ID        = int(os.getenv("CHAT_ID", "0"))
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
LOG_PATH       = os.getenv("LOG_PATH", "checklist_log.csv")
PORT           = int(os.getenv("PORT", 8000))

# === FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    name    = State()
    pharmacy= State()
    rating  = State()
    comment = State()

# === –ß–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ Excel ===
df = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_i = df[df.iloc[:,0]=="–ë–ª–æ–∫"].index[0]+1
df = df.iloc[start_i:,:8].dropna(subset=[1,2]).reset_index(drop=True)
df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]

criteria = []
last = None
for _,r in df.iterrows():
    blk = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else last
    last = blk
    maxv = int(r["–ú–∞–∫—Å"]) if str(r["–ú–∞–∫—Å"]).isdigit() else 10
    criteria.append({
        "block": blk,
        "criterion": r["–ö—Ä–∏—Ç–µ—Ä–∏–π"],
        "requirement": r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
        "max": maxv
    })

# === –£—Ç–∏–ª–∏—Ç—ã ===
def now_ts():
    return datetime.now(pytz.timezone("Asia/Almaty")).strftime("%Y-%m-%d %H:%M:%S")

def log_csv(pharm,name,ts,score,total):
    first = not os.path.exists(LOG_PATH)
    with open(LOG_PATH,"a",newline="",encoding="utf-8") as f:
        w = csv.writer(f)
        if first:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts,pharm,name,score,total])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp  = Dispatcher(storage=MemoryStorage())

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(F.text=="/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "<b>üìã –ß–µ–∫‚Äë–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ò–¢ ¬´–°–∞–¥—ã—Ö–∞–Ω¬ª.  \n"
        "–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ —á–µ–∫‚Äë–ª–∏—Å—Ç –≤–¥—É–º—á–∏–≤–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ:  \n"
        "- inline‚Äë–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏;  \n"
        "- –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –∑–∞–π–º—ë—Ç –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã ‚Äî –ø–æ—Å–ª–µ –≤—Å–µ—Ö –±–∞–ª–ª–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—ã–≤–æ–¥ —Ä—É—á–∫–æ–π.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.name)

# === /id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
@dp.message(F.text=="/id")
async def cmd_id(msg: types.Message):
    await msg.answer(f"<code>{msg.chat.id}</code>")

# === –°–±—Ä–æ—Å FSM ===
@dp.message(F.text=="/—Å–±—Ä–æ—Å")
async def cmd_reset(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û ===
@dp.message(Form.name)
async def proc_name(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    await state.update_data(name=name, step=0, data=[], start=now_ts())
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–ø—Ç–µ–∫–∏ ===
@dp.message(Form.pharmacy)
async def proc_pharmacy(msg: types.Message, state: FSMContext):
    await state.update_data(pharmacy=msg.text.strip())
    await msg.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_question(msg.chat.id, state)

# === –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä callback_query ===
@dp.callback_query()
async def cb_all(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    step = data.get("step",0)
    total= len(criteria)
    # –µ—Å–ª–∏ —É–∂–µ –≤—Å–µ –æ—Ü–µ–Ω–∏–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ acknowledge
    if step>=total:
        return await cb.answer()
    # –ø–∞—Ä—Å–∏–º –æ—Ü–µ–Ω–∫—É
    if cb.data.startswith("score_"):
        score = int(cb.data.split("_",1)[1])
        record = {"crit": criteria[step], "score": score}
        data["data"].append(record)
        data["step"] += 1
        await state.update_data(**data)
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}",
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id
        )
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        return await send_question(cb.from_user.id, state)
    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è ¬´–ù–∞–∑–∞–¥¬ª
    if cb.data=="prev" and step>0:
        data["step"]-=1
        data["data"].pop()
        await state.update_data(**data)
        return await send_question(cb.from_user.id, state)

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ ===
async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    total= len(criteria)

    # –µ—Å–ª–∏ –≤—Å—ë ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    if step>=total:
        await bot.send_message(
            chat_id,
            "‚úÖ –í—Å–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –≤—ã–≤–æ–¥—ã –ø–æ –∞–ø—Ç–µ–∫–µ:",
            parse_mode=ParseMode.HTML
        )
        await state.set_state(Form.comment)
        return

    c = criteria[step]
    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )
    kb = InlineKeyboardBuilder()
    start = 0 if c["max"]==1 else 1
    for i in range(start, c["max"]+1):
        kb.button(text=str(i), callback_data=f"score_{i}")
    if step>0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    await bot.send_message(chat_id, text, reply_markup=kb.as_markup())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ===
@dp.message(Form.comment)
async def proc_comment(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    data["comment"] = msg.text.strip()
    await state.update_data(**data)
    await msg.answer("‚åõ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶")
    await make_report(msg.chat.id, data)
    await state.clear()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ ===
async def make_report(chat_id: int, data):
    name     = data["name"]
    ts       = data["start"]
    pharmacy = data["pharmacy"]
    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = (f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n"
             f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
             f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {ts}")
    ws.merge_cells("A1:G2")
    ws["A1"] = title
    ws["A1"].font = Font(size=14, bold=True)
    ws["B3"] = pharmacy

    # –®–∞–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    headers = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ö–æ–º–º–µ–Ω—Ç.","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"]
    for idx,h in enumerate(headers, start=1):
        cell = ws.cell(5, idx, h)
        cell.font = Font(bold=True)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏
    row = 6
    total_score = 0
    total_max   = 0
    for rec in data["data"]:
        c = rec["crit"]
        sc= rec["score"]
        ws.cell(row,1, c["block"])
        ws.cell(row,2, c["criterion"])
        ws.cell(row,3, c["requirement"])
        ws.cell(row,4, sc)
        ws.cell(row,5, c["max"])
        ws.cell(row,6, "")  # –º–æ–∂–Ω–æ —Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–º.
        ws.cell(row,7, ts)
        total_score += sc
        total_max   += c["max"]
        row += 1

    # –ò—Ç–æ–≥–æ
    ws.cell(row+1,3, "–ò–¢–û–ì–û:")
    ws.cell(row+1,4, total_score)
    ws.cell(row+2,3, "–ú–∞–∫—Å–∏–º—É–º:")
    ws.cell(row+2,4, total_max)

    # –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–Ω–∏–∑—É
    ws.cell(row+4,1, "–í—ã–≤–æ–¥ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ:")
    ws.cell(row+5,1, data.get("comment",""))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    fn = f"{pharmacy}_{name}_{datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y_%H%M')}.xlsx"
    fn = fn.replace(" ","_")
    wb.save(fn)

    # 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(fn,"rb") as f:
        await bot.send_document(chat_id, FSInputFile(f, fn))
    # 2) –ò –≤ QA‚Äë—á–∞—Ç
    with open(fn,"rb") as f:
        await bot.send_document(CHAT_ID, FSInputFile(f, fn))

    # –õ–æ–≥–∏—Ä—É–µ–º
    log_csv(pharmacy, name, ts, total_score, total_max)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id,
        "‚úÖ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
        "–î–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî /start"
    )
    os.remove(fn)

# === Webhook & –∑–∞–ø—É—Å–∫ ===
async def handle_webhook(request: web.Request):
    update = Update(**await request.json())
    await dp.feed_update(bot, update)
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω Webhook:
    # await bot.set_webhook(os.getenv("WEBHOOK_URL"))
    pass

app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.router.add_get("/", lambda r: web.Response(text="OK"))

if __name__=="__main__":
    logging.getLogger("aiohttp.access").setLevel(logging.WARNING)
    web.run_app(app, host="0.0.0.0", port=PORT)
