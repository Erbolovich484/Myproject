import logging
import os
import csv
import pytz
from datetime import datetime
from dotenv import load_dotenv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Update
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties

from aiohttp import web

# === –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")
CHAT_ID        = int(os.getenv("CHAT_ID", "0"))
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
LOG_PATH       = os.getenv("LOG_PATH", "checklist_log.csv")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")      # https://<app>.onrender.com/webhook
PORT           = int(os.getenv("PORT", "8000"))

# === FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    name     = State()
    pharmacy = State()
    rating   = State()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ Excel ===
_raw = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_i = _raw[_raw.iloc[:,0] == "–ë–ª–æ–∫"].index[0] + 1
_df = _raw.iloc[start_i:,:8].reset_index(drop=True)
_df.columns = [
    "–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞",
    "–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
]
_df = _df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])  # <-- —É–±—Ä–∞–ª–∏ –ª–∏—à–Ω—é—é –∑–∞–ø—è—Ç—É—é

criteria = []
_last = None
for _, row in _df.iterrows():
    blk = row["–ë–ª–æ–∫"] if pd.notna(row["–ë–ª–æ–∫"]) else _last
    _last = blk
    maxv = int(row["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) if pd.notna(row["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) and str(row["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]).isdigit() else 10
    criteria.append({
        "block": blk,
        "criterion": row["–ö—Ä–∏—Ç–µ—Ä–∏–π"],
        "requirement": row["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
        "max": maxv
    })

# === –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ===
def now_ts() -> str:
    tz = pytz.timezone("Asia/Almaty")
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

def log_submission(pharmacy: str, name: str, ts: str, score: int, max_score: int):
    first = not os.path.exists(LOG_PATH)
    with open(LOG_PATH, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if first:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–§–ò–û","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, pharmacy, name, score, max_score])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot & Dispatcher ===
session = AiohttpSession()
bot = Bot(
    token=API_TOKEN,
    session=session,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# === –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ===
@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n\n"
        "–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ ‚Äî –æ—Ç—á—ë—Ç –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "‚úÖ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî –æ—Ç—á—ë—Ç –≤ Excel –∏ –≤ QA-—á–∞—Ç.\n\n"
        "üèÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.name)

@dp.message(F.text == "/id")
async def cmd_id(msg: types.Message):
    await msg.answer(f"–í–∞—à chat_id: <code>{msg.chat.id}</code>", parse_mode=ParseMode.HTML)

@dp.message(F.text == "/–ª–æ–≥")
async def cmd_log(msg: types.Message):
    if os.path.exists(LOG_PATH):
        await msg.answer_document(FSInputFile(LOG_PATH))
    else:
        await msg.answer("–õ–æ–≥ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")

@dp.message(F.text == "/—Å–±—Ä–æ—Å")
async def cmd_reset(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û –∏ –∞–ø—Ç–µ–∫–∏ ===
@dp.message(Form.name)
async def proc_name(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    await state.update_data(name=name, step=0, answers=[], start=now_ts())
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)

@dp.message(Form.pharmacy)
async def proc_pharmacy(msg: types.Message, state: FSMContext):
    await state.update_data(pharmacy=msg.text.strip())
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_question(msg.chat.id, state)

# === Callback-handler –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏ –∏ ¬´–ù–∞–∑–∞–¥¬ª ===
@dp.callback_query()
async def cb_score(cb: types.CallbackQuery, state: FSMContext):
    # —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è
    await cb.answer()

    data = await state.get_data()
    step = data["step"]

    # ¬´–ù–∞–∑–∞–¥¬ª
    if cb.data == "prev" and step > 0:
        data["step"] -= 1
        data["answers"].pop()
        await state.set_data(data)
        return await send_question(cb.from_user.id, state)

    # –û—Ü–µ–Ω–∫–∞
    if cb.data.startswith("score_"):
        score = int(cb.data.split("_")[1])
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data.setdefault("answers", []).append({"crit": criteria[step], "score": score})
        data["step"] += 1
        await state.set_data(data)

        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            text=f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}"
        )
        return await send_question(cb.from_user.id, state)

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    total = len(criteria)

    if step >= total:
        await bot.send_message(chat_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶")
        return await make_report(chat_id, data)

    c = criteria[step]
    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )
    kb = InlineKeyboardBuilder()
    start = 0 if c["max"] == 1 else 1
    for i in range(start, c["max"] + 1):
        kb.button(text=str(i), callback_data=f"score_{i}")
    if step > 0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    await bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, reply_markup=kb.as_markup())

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ ===
async def make_report(chat_id: int, data: dict):
    name     = data["name"]
    ts       = data["start"]
    pharm    = data.get("pharmacy", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    answers  = data["answers"]

    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active

    # —à–∞–ø–∫–∞
    title = (
        f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
        f"–î–∞—Ç–∞: {datetime.strptime(ts, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}"
    )
    ws.merge_cells("A1:G2")
    ws["A1"] = title
    ws["A1"].font = Font(size=14, bold=True)
    ws["B3"] = pharm

    # –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–ë–∞–ª–ª—ã","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞"]
    for col, h in enumerate(headers, start=1):
        cell = ws.cell(row=5, column=col, value=h)
        cell.font = Font(bold=True)

    # —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    row = 6
    total_score = 0
    total_max   = 0
    for item in answers:
        c  = item["crit"]
        sc = item["score"]
        ws.cell(row,1, c["block"])
        ws.cell(row,2, c["criterion"])
        ws.cell(row,3, c["requirement"])
        ws.cell(row,4, sc)
        ws.cell(row,5, c["max"])
        ws.cell(row,7, ts)
        total_score += sc
        total_max   += c["max"]
        row += 1

    # –∏—Ç–æ–≥
    ws.cell(row+1,3,"–ò–¢–û–ì–û:")
    ws.cell(row+1,4,total_score)
    ws.cell(row+2,3,"–ú–∞–∫—Å–∏–º—É–º:")
    ws.cell(row+2,4,total_max)

    fname = f"{pharm}_{name}_{datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}.xlsx".replace(" ","_")
    wb.save(fname)

    # 1) –≤ QA-—á–∞—Ç
    with open(fname, "rb") as f:
        await bot.send_document(CHAT_ID, FSInputFile(f, fname))
    # 2) –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(fname, "rb") as f:
        await bot.send_document(chat_id, FSInputFile(f, fname))

    os.remove(fname)
    log_submission(pharm, name, ts, total_score, total_max)

    # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(
        chat_id,
        "‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ QA-—á–∞—Ç.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start"
    )

# === Webhook & Healthcheck ===
async def handle_webhook(request: web.Request):
    data = await request.json()
    upd  = Update(**data)
    await dp.feed_update(bot=bot, update=upd)
    return web.Response(text="OK")

async def health(request: web.Request):
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True, allowed_updates=["message","callback_query"])

async def on_cleanup(app: web.Application):
    await bot.delete_webhook()
    await storage.close()

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
app = web.Application()
app.router.add_get("/", health)
app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, host="0.0.0.0", port=PORT)
