import logging
import os
import csv
import pytz
from datetime import datetime
from dotenv import load_dotenv
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font
import asyncio

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Update
from aiohttp import web

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ ===
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID", "0"))
TEMPLATE_PATH = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "checklist.xlsx")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
LOG_PATH = os.getenv("LOG_PATH", "checklist_log.csv")
PORT = int(os.getenv("PORT", 8080))  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ—Ä—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º Railway
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# === FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    name = State()
    pharmacy = State()
    rating = State()
    comment = State()

# === –ß–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ Excel ===
try:
    df = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
    start_i = df[df.iloc[:, 0] == "–ë–ª–æ–∫"].index[0] + 1
    df = df.iloc[start_i:, :8].dropna(subset=[1, 2]).reset_index(drop=True)
    df.columns = ["–ë–ª–æ–∫", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–û—Ü–µ–Ω–∫–∞", "–ú–∞–∫—Å", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
                  "–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]

    criteria = []
    last = None
    for _, r in df.iterrows():
        blk = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else last
        last = blk
        maxv = int(r["–ú–∞–∫—Å"]) if str(r["–ú–∞–∫—Å"]).isdigit() else 10
        criteria.append({
            "block": blk,
            "criterion": r["–ö—Ä–∏—Ç–µ—Ä–∏–π"],
            "requirement": r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
            "max": maxv
        })
except FileNotFoundError:
    logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {CHECKLIST_PATH}")
    criteria = []
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {CHECKLIST_PATH}: {e}")
    criteria = []

# === –£—Ç–∏–ª–∏—Ç—ã ===
def now_ts():
    return datetime.now(pytz.timezone("Asia/Almaty")).strftime("%Y-%m-%d %H:%M:%S")

def log_csv(pharm, name, ts, score, total):
    first = not os.path.exists(LOG_PATH)
    try:
        with open(LOG_PATH, "a", newline="", encoding="utf-8") as f:
            w = csv.writer(f)
            if first:
                w.writerow(["–î–∞—Ç–∞", "–ê–ø—Ç–µ–∫–∞", "–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π", "–ë–∞–ª–ª—ã", "–ú–∞–∫—Å"])
            w.writerow([ts, pharm, name, score, total])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª {LOG_PATH}: {e}")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(F.text=="/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    logging.info(f"Handler 'cmd_start' called by user {msg.from_user.id}, chat {msg.chat.id}, text: {msg.text}")
    await state.clear()
    await msg.answer(
        "<b>üìã –ß–µ–∫‚Äë–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ò–¢ ¬´–°–∞–¥—ã—Ö–∞–Ω¬ª.  \n"
        "–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ —á–µ–∫‚Äë–ª–∏—Å—Ç –≤–¥—É–º—á–∏–≤–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ:  \n"
        "- inline‚Äë–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏;  \n"
        "- –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –∑–∞–π–º—ë—Ç –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã ‚Äî –ø–æ—Å–ª–µ –≤—Å–µ—Ö –±–∞–ª–ª–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—ã–≤–æ–¥ —Ä—É—á–∫–æ–π.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.name)
    logging.info(f"User {msg.from_user.id} set state to Form.name")

# === /id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
@dp.message(F.text=="/id")
async def cmd_id(msg: types.Message):
    logging.info(f"Handler 'cmd_id' called by user {msg.from_user.id}, chat {msg.chat.id}, text: {msg.text}")
    await msg.answer(f"<code>{msg.chat.id}</code>")

# === –°–±—Ä–æ—Å FSM ===
@dp.message(F.text=="/—Å–±—Ä–æ—Å")
async def cmd_reset(msg: types.Message, state: FSMContext):
    logging.info(f"Handler 'cmd_reset' called by user {msg.from_user.id}, chat {msg.chat.id}, text: {msg.text}")
    await state.clear()
    await msg.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    logging.info(f"User {msg.from_user.id} state cleared")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û ===
@dp.message(Form.name)
async def proc_name(msg: types.Message, state: FSMContext):
    logging.info(f"Handler 'proc_name' called by user {msg.from_user.id}, chat {msg.chat.id}, text: {msg.text}")
    name = msg.text.strip()
    await state.update_data(name=name, step=0, data=[], start=now_ts())
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)
    logging.info(f"User {msg.from_user.id} entered name: {name}, set state to Form.pharmacy, state data: {await state.get_data()}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–ø—Ç–µ–∫–∏ ===
@dp.message(Form.pharmacy)
async def proc_pharmacy(msg: types.Message, state: FSMContext):
    logging.info(f"Handler 'proc_pharmacy' called by user {msg.from_user.id}, chat {msg.chat.id}, text: {msg.text}")
    await state.update_data(pharmacy=msg.text.strip())
    await msg.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    logging.info("Calling send_question from proc_pharmacy")
    await send_question(msg.chat.id, state)
    logging.info(f"User {msg.from_user.id} entered pharmacy: {await state.get_data()}, set state to Form.rating")

# === –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä callback_query ===
@dp.callback_query()
async def cb_all(cb: types.CallbackQuery, state: FSMContext):
    logging.info(f"*** CALLBACK QUERY RECEIVED: {cb.data} ***")
    logging.info(f"Callback query received from user {cb.from_user.id}, chat {cb.message.chat.id}, data: {cb.data}")
    data = await state.get_data()
    step = data.get("step", 0)
    total = len(criteria)
    # –µ—Å–ª–∏ —É–∂–µ –≤—Å–µ –æ—Ü–µ–Ω–∏–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ acknowledge
    if step >= total:
        return await cb.answer()
    # –ø–∞—Ä—Å–∏–º –æ—Ü–µ–Ω–∫—É
    if cb.data.startswith("score_"):
        score = int(cb.data.split("_", 1)[1])
        record = {"crit": criteria[step], "score": score}
        data["data"].append(record)
        data["step"] += 1
        await state.update_data(**data)
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê' * score}",
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id
        )
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        return await send_question(cb.from_user.id, state)
    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è ¬´–ù–∞–∑–∞–¥¬ª
    if cb.data == "prev" and step > 0:
        data["step"] -= 1
        data["data"].pop()
        await state.update_data(**data)
        return await send_question(cb.from_user.id, state)

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ ===
async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step = data.get("step", 0)
    total = len(criteria)
    logging.info(f"send_question called. step: {step}, total: {total}, criteria length: {len(criteria)}")

    # –µ—Å–ª–∏ –≤—Å—ë ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    if step >= total:
        await bot.send_message(
            chat_id,
            "‚úÖ –í—Å–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –≤—ã–≤–æ–¥—ã –ø–æ –∞–ø—Ç–µ–∫–µ:",
            parse_mode=ParseMode.HTML
        )
        await state.set_state(Form.comment)
        logging.info(f"User {chat_id} finished rating, set state to Form.comment")
        return

    c = criteria[step]
    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {step + 1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )
    kb = InlineKeyboardBuilder()
    start = 0 if c["max"] == 1 else 1
    for i in range(start, c["max"] + 1):
        kb.button(text=str(i), callback_data=f"score_{i}")
    if step > 0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    await bot.send_message(chat_id, text, reply_markup=kb.as_markup())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ===
@dp.message(Form.comment)
async def proc_comment(msg: types.Message, state: FSMContext):
    logging.info(f"Handler 'proc_comment' called by user {msg.from_user.id}, chat {msg.chat.id}, text: {msg.text}")
    data = await state.get_data()
    data["comment"] = msg.text.strip()
    await state.update_data(**data)
    await msg.answer("‚åõ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶")
    await make_report(msg.chat.id, data)
    await state.clear()
    logging.info(f"User {msg.from_user.id} entered comment, report initiated, state cleared")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ ===
async def make_report(user_id: int, data):
    logging.info(f"Generating report for user {user_id}, data: {data}")
    name = data["name"]
    ts = data["start"]
    pharmacy = data["pharmacy"]
    report_filename = f"{pharmacy}_{name}_{datetime.strptime(ts, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y_%H%M')}.xlsx".replace(" ", "_")

    try:
        logging.info(f"Attempting to load template: {TEMPLATE_PATH}")
        wb = load_workbook(TEMPLATE_PATH)
        ws = wb.active
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = (f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n"
                 f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
                 f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {ts}")
        ws.merge_cells("A1:G2")
        ws["A1"] = title
        ws["A1"].font = Font(size=14, bold=True)
        ws["B3"] = pharmacy

        # –®–∞–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        headers = ["–ë–ª–æ–∫", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–û—Ü–µ–Ω–∫–∞", "–ú–∞–∫—Å", "–ö–æ–º–º–µ–Ω—Ç.", "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"]
        for idx, h in enumerate(headers, start=1):
            cell = ws.cell(5, idx, h)
            cell.font = Font(bold=True)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏
        row = 6
        total_score = 0
        total_max = 0
        for rec in data["data"]:
            c = rec["crit"]
            sc = rec["score"]
            ws.cell(row, 1, c["block"])
            ws.cell(row, 2, c["criterion"])
            ws.cell(row, 3, c["requirement"])
            ws.cell(row, 4, sc)
            ws.cell(row, 5, c["max"])
            ws.cell(row, 6, "")  # –º–æ–∂–Ω–æ —Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–º.
            ws.cell(row, 7, ts)
            total_score += sc
            total_max += c["max"]
            row += 1

        # –ò—Ç–æ–≥–æ
        ws.cell(row + 1, 3, "–ò–¢–û–ì–û:")
        ws.cell(row + 1, 4, total_score)
        ws.cell(row + 2, 3, "–ú–∞–∫—Å–∏–º—É–º:")
        ws.cell(row + 2, 4, total_max)

        # –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–Ω–∏–∑—É
        ws.cell(row + 4, 1, "–í—ã–≤–æ–¥ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ:")
        ws.cell(row + 5, 1, data.get("comment", ""))

        try:
            logging.info(f"Attempting to save report: {report_filename}")
            wb.save(report_filename)
            logging.info(f"Report '{report_filename}' saved")
        except Exception as e:
            logging.error(f"Error saving report: {e}", exc_info=True)
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")
            return

        try:
            logging.info(f"Attempting to open report for sending: {report_filename}")
            with open(report_filename, "rb") as f:
                logging.info(f"Report opened successfully, attempting to send to user {user_id}")
                await bot.send_document(user_id, FSInputFile(f, report_filename))
                logging.info(f"Report sent to user {user_id}")
        except Exception as e:
            logging.error(f"Error sending report to user {user_id}: {e}", exc_info=True)
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞.")
            return

        try:
            logging.info(f"Attempting to open report for sending to chat {CHAT_ID}: {report_filename}")
            with open(report_filename, "rb") as f:
                logging.info(f"Report opened successfully, attempting to send to chat {CHAT_ID}")
                await bot.send_document(CHAT_ID, FSInputFile(f, report_filename))
                logging.info(f"Report sent to chat {CHAT_ID}")
        except Exception as e:
            logging.error(f"Error sending report to chat {CHAT_ID}: {e}", exc_info=True)
            # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –õ–æ–≥–∏—Ä—É–µ–º
        log_csv(pharmacy, name, ts, total_score, total_max)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(user_id,
                               "‚úÖ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
                               "–î–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî /start")

    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {TEMPLATE_PATH}")
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}", exc_info=True)
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")
    finally:
        try:
            logging.info(f"Attempting to remove temporary file: {report_filename}")
            os.remove(report_filename)
            logging.info(f"Temporary report file '{report_filename}' deleted")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {report_filename}: {e}")

# === Webhook & –∑–∞–ø—É—Å–∫ ===
async def handle_webhook(request: web.Request):
    logging.info(f"Received webhook request: {request.method} {request.url}")
    try:
        update = Update(**await request.json())
        logging.info(f"Parsed update: {update}")
        await dp.feed_update(bot, update)
        return web.Response(text="OK")
    except Exception as e:
        logging.error(f"Error processing webhook: {e}", exc_info=True)
        return web.Response(status=500)

async def on_startup(bot: Bot):
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        await bot.set_webhook(webhook_url)
        logging.info(f"Webhook set to: {webhook_url}")
    else:
        logging.warning("WEBHOOK_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ Long Polling.")

async def on_shutdown(bot: Bot):
    logging.warning("Shutting down...")
    await bot.delete_webhook()
    await bot.session.close()
    logging.warning("Bot and session closed.")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    if WEBHOOK_URL:
        app = web.Application()
        app.add_routes([web.post("/webhook", handle_webhook)])
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", PORT)
        await site.start()
        logging.info(f"Web application started on port {PORT}")
        # Keep the server running
        while True:
            await asyncio.sleep(3600)
    else:
        await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
