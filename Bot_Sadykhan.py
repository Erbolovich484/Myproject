import logging
import os
import csv
import pytz
from datetime import datetime
from dotenv import load_dotenv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
API_TOKEN     = os.getenv("API_TOKEN")                      # –í–∞—à —Ç–æ–∫–µ–Ω
QA_CHAT_ID    = int(os.getenv("QA_CHAT_ID", "0"))           # —á–∞—Ç –¥–ª—è QA
TEMPLATE_PATH = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH= os.getenv("CHECKLIST_PATH", "checklist.xlsx")
LOG_PATH      = os.getenv("LOG_PATH", "checklist_log.csv")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    name       = State()
    pharmacy   = State()
    rating     = State()
    comment    = State()

# === –ß—Ç–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ ===
_df = pd.read_excel(CHECKLIST_PATH, sheet_name="–ß–µ–∫ –ª–∏—Å—Ç", header=None)
start_i = _df[_df.iloc[:,0]=="–ë–ª–æ–∫"].index[0] + 1
_df = _df.iloc[start_i:,:8].reset_index(drop=True)
_df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
_df = _df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])
criteria = []
last_block = None
for _, r in _df.iterrows():
    blk = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else last_block
    last_block = blk
    maxv = int(r["–ú–∞–∫—Å"]) if pd.notna(r["–ú–∞–∫—Å"]) and str(r["–ú–∞–∫—Å"]).isdigit() else 10
    criteria.append({"block":blk,"criterion":r["–ö—Ä–∏—Ç–µ—Ä–∏–π"],"requirement":r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],"max":maxv})

TOTAL = len(criteria)

def now_str(fmt="%Y-%m-%d_%H-%M-%S"):
    tz = pytz.timezone("Asia/Almaty")
    return datetime.now(tz).strftime(fmt)

def log_csv(ph, nm, ts, sc, mx):
    exists = os.path.exists(LOG_PATH)
    with open(LOG_PATH, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if not exists:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, ph, nm, sc, mx])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp  = Dispatcher(storage=MemoryStorage())

# === /start ===
@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n\n"
        "–≠—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ò–¢-–°–∞–¥—ã—Ö–∞–Ω.\n"
        "–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –≤–¥—É–º—á–∏–≤–æ ‚Äî –æ—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –∏ –≤ QA-—á–∞—Ç.\n\n"
        "üèÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
    )
    await state.set_state(Form.name)

# === –§–ò–û ===
@dp.message(Form.name)
async def proc_name(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    await state.update_data(name=name, step=0, answers=[], start=now_str("%Y-%m-%d %H:%M:%S"))
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
    await state.set_state(Form.pharmacy)

# === –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏ ===
@dp.message(Form.pharmacy)
async def proc_pharmacy(msg: types.Message, state: FSMContext):
    await state.update_data(pharmacy=msg.text.strip())
    await msg.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await state.set_state(Form.rating)
    await send_question(msg.chat.id, state)

# === –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–æ–∫ ===
@dp.callback_query()
async def cb_all(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()  # –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ "timeout"
    data = await state.get_data()
    step = data["step"]

    if cb.data == "prev" and step > 0:
        # –Ω–∞–∑–∞–¥
        data["step"] -= 1
        data["answers"].pop()
        await state.set_data(data)
        return await send_question(cb.from_user.id, state)

    if cb.data.startswith("score_"):
        score = int(cb.data.split("_")[1])
        crit  = criteria[step]
        data["answers"].append({"crit":crit,"score":score})
        data["step"] += 1
        await state.set_data(data)

        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞: {score} {'‚≠ê'*score}",
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id
        )

        # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç—É
        if data["step"] >= TOTAL:
            await bot.send_message(cb.from_user.id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–≤–æ–¥ –ø–æ –∞–ø—Ç–µ–∫–µ (–∏–ª–∏ ¬´‚Äî¬ª, –µ—Å–ª–∏ –Ω–µ—Ç):")
            return await state.set_state(Form.comment)

        return await send_question(cb.from_user.id, state)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    crit = criteria[step]
    kb = InlineKeyboardBuilder()
    start = 0 if crit["max"]==1 else 1
    for i in range(start, crit["max"]+1):
        kb.button(str(i), callback_data=f"score_{i}")
    if step>0:
        kb.button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    await bot.send_message(
        chat_id,
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {TOTAL}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {crit['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {crit['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {crit['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {crit['max']}",
        reply_markup=kb.as_markup()
    )

# === –°–≤–æ–±–æ–¥–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ===
@dp.message(Form.comment)
async def proc_comment(msg: types.Message, state: FSMContext):
    await state.update_data(comment=msg.text.strip())
    await msg.answer("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶")
    data = await state.get_data()
    await make_report(msg.chat.id, data)
    await state.clear()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ ===
async def make_report(user_chat: int, data: dict):
    name     = data["name"]
    pharm    = data["pharmacy"]
    ts       = data["start"]
    comment  = data.get("comment", "")
    answers  = data["answers"]

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Excel
    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active
    title = f"–û—Ç—á—ë—Ç: {pharm} ‚Äî {name} ({ts.split()[0]})"
    ws.merge_cells("A1:G2")
    ws["A1"] = title
    ws["A1"].font = Font(size=14, bold=True)
    ws["B3"] = pharm

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    hdr = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"]
    for i,h in enumerate(hdr,1):
        ws.cell(row=5, column=i, value=h).font = Font(bold=True)

    # –î–∞–Ω–Ω—ã–µ
    row = 6; total=0; max_total=0
    for it in answers:
        c = it["crit"]; sc=it["score"]
        ws.cell(row,1,c["block"])
        ws.cell(row,2,c["criterion"])
        ws.cell(row,3,c["requirement"])
        ws.cell(row,4,sc)
        ws.cell(row,5,c["max"])
        ws.cell(row,7,ts)
        total += sc; max_total += c["max"]
        row += 1

    # –ò–¢–û–ì–û –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    ws.cell(row+1,3,"–ò–¢–û–ì–û:");   ws.cell(row+1,4,total)
    ws.cell(row+2,3,"–ú–∞–∫—Å–∏–º—É–º:");ws.cell(row+2,4,max_total)
    ws.cell(row+4,1,"–í—ã–≤–æ–¥ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ:"); ws.cell(row+4,2, comment)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
    fn = f"{pharm}_{name}_{now_str()}.xlsx".replace(" ", "_")
    wb.save(fn)

    # –û—Ç–ø—Ä–∞–≤–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤ QA-—á–∞—Ç
    for chat in (user_chat, QA_CHAT_ID):
        with open(fn,"rb") as f:
            await bot.send_document(chat, types.InputFile(f, filename=fn))
    os.remove(fn)

    # –õ–æ–≥
    log_csv(pharm, name, ts, total, max_total)

# === –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===
@dp.message(F.text == "/id")
async def cmd_id(msg: types.Message):
    await msg.answer(f"–í–∞—à chat_id = <code>{msg.chat.id}</code>")

@dp.message(F.text == "/–ª–æ–≥")
async def cmd_log(msg: types.Message):
    if os.path.exists(LOG_PATH):
        await msg.answer_document(types.InputFile(LOG_PATH))
    else:
        await msg.answer("–õ–æ–≥ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")

@dp.message(F.text == "/—Å–±—Ä–æ—Å")
async def cmd_reset(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logger.info("–°—Ç–∞—Ä—Ç polling‚Ä¶")
    dp.run_polling(bot)
