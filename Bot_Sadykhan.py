import logging
import os
import csv
import pytz
from datetime import datetime
from dotenv import load_dotenv

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Update
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties

from aiohttp import web

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
API_TOKEN      = os.getenv("API_TOKEN")
CHAT_ID        = int(os.getenv("CHAT_ID", "0"))
TEMPLATE_PATH  = os.getenv("TEMPLATE_PATH", "template.xlsx")
CHECKLIST_PATH = os.getenv("CHECKLIST_PATH", "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–µ–∫.xlsx")
LOG_PATH       = os.getenv("LOG_PATH", "checklist_log.csv")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")
PORT           = int(os.getenv("PORT", "8000"))

ALLOWED_USERS = [
    "–ù–∏–∫–æ–ª–∞–π –ö—Ä—ã–ª–æ–≤", "–¢–∞–∂–¥–∏–Ω –£—Å–µ–π–Ω", "–ñ–∞–Ω–∞—Ä –ë”©–ª—Ç—ñ—Ä—ñ–∫",
    "–®–∞—Ä–∞ –ê–±–¥–∏–µ–≤–∞", "–¢–æ—Ö—Ç–∞—Ä –ß–∞—Ä–∞–±–∞—Å–æ–≤", "*"
]

class Form(StatesGroup):
    name     = State()
    pharmacy = State()
    rating   = State()

# === –ß–∏—Ç–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç ===
df = pd.read_excel(CHECKLIST_PATH, sheet_name='–ß–µ–∫ –ª–∏—Å—Ç', header=None)
start_i = df[df.iloc[:,0]=="–ë–ª–æ–∫"].index[0] + 1
df = df.iloc[start_i:,:8].reset_index(drop=True)
df.columns = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞","–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏","–î–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
df = df.dropna(subset=["–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"])

criteria = []
last = None
for _, r in df.iterrows():
    blk = r["–ë–ª–æ–∫"] if pd.notna(r["–ë–ª–æ–∫"]) else last
    last = blk
    maxv = int(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) if pd.notna(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]) and str(r["–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ"]).isdigit() else 10
    criteria.append({"block": blk, "criterion":r["–ö—Ä–∏—Ç–µ—Ä–∏–π"], "requirement":r["–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ"], "max":maxv})

def get_time():
    tz = pytz.timezone("Asia/Almaty")
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

def log_csv(ph, nm, ts, sc, mx):
    ex = os.path.exists(LOG_PATH)
    with open(LOG_PATH, 'a', newline='', encoding='utf-8') as f:
        w = csv.writer(f)
        if not ex:
            w.writerow(["–î–∞—Ç–∞","–ê–ø—Ç–µ–∫–∞","–§–ò–û –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ","–ë–∞–ª–ª—ã","–ú–∞–∫—Å"])
        w.writerow([ts, ph, nm, sc, mx])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
session = AiohttpSession()
bot = Bot(token=API_TOKEN, session=session, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# --- –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(F.text == "/start")
async def cmd_start(m: types.Message, s: FSMContext):
    await s.clear()
    text = (
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∞–ø—Ç–µ–∫</b>\n\n"
        "–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –æ—Ç—á—ë—Ç –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "‚úÖ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî –æ—Ç—á—ë—Ç –≤ Excel.\n"
        "üèÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    await m.answer(text)
    await s.set_state(Form.name)

@dp.message(F.text == "/id")
async def cmd_id(m: types.Message):
    await m.answer(f"–í–∞—à chat_id: <code>{m.chat.id}</code>", parse_mode=ParseMode.HTML)

@dp.message(F.text == "/–ª–æ–≥")
async def cmd_log(m: types.Message):
    if os.path.exists(LOG_PATH):
        await m.answer_document(FSInputFile(LOG_PATH))
    else:
        await m.answer("–õ–æ–≥ –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")

@dp.message(F.text == "/—Å–±—Ä–æ—Å")
async def cmd_reset(m: types.Message, s: FSMContext):
    await s.clear()
    await m.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. /start ‚Äî —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
@dp.message(Form.name)
async def proc_name(m: types.Message, s: FSMContext):
    u = m.text.strip()
    if u in ALLOWED_USERS or "*" in ALLOWED_USERS:
        await s.update_data(name=u, step=0, data=[], start=get_time())
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏:")
        await s.set_state(Form.pharmacy)
    else:
        await m.answer("–§–ò–û –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ò–¢-–æ—Ç–¥–µ–ª.")

@dp.message(Form.pharmacy)
async def proc_pharmacy(m: types.Message, s: FSMContext):
    await s.update_data(pharmacy=m.text.strip())
    await m.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")
    await s.set_state(Form.rating)
    await send_quest(m.chat.id, s)

# --- CallbackQuery –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
@dp.callback_query()
async def cb_all(cb: types.CallbackQuery, s: FSMContext):
    data = await s.get_data()
    step = data.get("step", 0)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    if cb.data == "prev" and step > 0:
        data["step"] -= 1
        data["data"].pop()
        await s.set_data(data)
        await cb.answer("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        return await send_quest(cb.from_user.id, s)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤–∏–¥–∞ score_X
    if cb.data and cb.data.startswith("score_"):
        sc = int(cb.data.split("_")[1])
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data.setdefault("data", []).append({"crit":criteria[step], "score":sc})
        data["step"] += 1
        await s.set_data(data)
        await cb.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {sc}")
        # –ø—Ä–∞–≤–∏–º –ø—Ä–µ–¥. —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            text=f"–û—Ü–µ–Ω–∫–∞: {sc} {'‚≠ê'*sc}"
        )
        return await send_quest(cb.from_user.id, s)

    # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∏–≥–Ω–æ—Ä
    await cb.answer()

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ---
async def send_quest(chat_id: int, s: FSMContext):
    data = await s.get_data()
    step = data["step"]
    total = len(criteria)

    if step >= total:
        await bot.send_message(chat_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç‚Ä¶")
        return await make_report(chat_id, data)

    c = criteria[step]
    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}</b>\n\n"
        f"<b>–ë–ª–æ–∫:</b> {c['block']}\n"
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–π:</b> {c['criterion']}\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> {c['requirement']}\n"
        f"<b>–ú–∞–∫—Å. –±–∞–ª–ª:</b> {c['max']}"
    )
    kb = InlineKeyboardBuilder()
    start = 0 if c["max"] == 1 else 1
    for i in range(start, c["max"]+1):
        kb.button(text=str(i), callback_data=f"score_{i}")
    if step > 0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev")
    kb.adjust(5)

    await bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, reply_markup=kb.as_markup())

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ ---
async def make_report(chat_id: int, data):
    name  = data["name"]
    ts    = data["start"]
    pharm = data.get("pharmacy", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    wb = load_workbook(TEMPLATE_PATH)
    ws = wb.active
    title = (
        f"–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø—Ç–µ–∫–∏\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}\n"
        f"–î–∞—Ç–∞: {datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}"
    )
    ws.merge_cells("A1:G2"); ws["A1"] = title; ws["A1"].font = Font(size=14, bold=True)
    ws["B3"] = pharm
    headers = ["–ë–ª–æ–∫","–ö—Ä–∏—Ç–µ—Ä–∏–π","–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ","–û—Ü–µ–Ω–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞","–ú–∞–∫—Å. –æ—Ü–µ–Ω–∫–∞","–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ","–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"]
    for idx,h in enumerate(headers,1):
        cell = ws.cell(row=5, column=idx, value=h); cell.font = Font(bold=True)
    row = 6; total_sc=0; total_max=0
    for it in data["data"]:
        c = it["crit"]; sc = it["score"]
        ws.cell(row,1,c["block"]); ws.cell(row,2,c["criterion"])
        ws.cell(row,3,c["requirement"]); ws.cell(row,4,sc)
        ws.cell(row,5,c["max"]); ws.cell(row,7,ts)
        total_sc += sc; total_max += c["max"]; row += 1
    ws.cell(row+1,3,"–ò–¢–û–ì–û:"); ws.cell(row+1,4,total_sc)
    ws.cell(row+2,3,"–ú–∞–∫—Å–∏–º—É–º:"); ws.cell(row+2,4,total_max)

    fn = f"{pharm}_{name}_{datetime.strptime(ts,'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')}.xlsx".replace(" ","_")
    wb.save(fn)
    with open(fn,"rb") as f:
        await bot.send_document(CHAT_ID, FSInputFile(f))
    os.remove(fn)
    log_csv(pharm, name, ts, total_sc, total_max)
    await bot.send_message(chat_id, "–ì–æ—Ç–æ–≤–æ! /start ‚Äî —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# --- Webhook & healthcheck ---
async def handle_webhook(request: web.Request):
    data = await request.json()
    upd = Update(**data)
    await dp.feed_update(bot=bot, update=upd)
    return web.Response(text="OK")

async def health(request: web.Request):
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True, allowed_updates=[])

async def on_cleanup(app: web.Application):
    await bot.delete_webhook()
    await storage.close()

app = web.Application()
app.router.add_get("/", health)
app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, host="0.0.0.0", port=PORT)
